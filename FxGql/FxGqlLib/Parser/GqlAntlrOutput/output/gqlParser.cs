//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g 2012-06-04 13:45:25

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


// `XXX' does not need a CLSCompliant attribute because the assembly is not marked as CLS-compliant (CS3021)
#pragma warning disable 3021
// The private field `XXX' is assigned but its value is never used (CS0414)
#pragma warning disable 414


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  FxGqlLib 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class gqlParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ALL", "AND", "ANY", "AS", "ASC", "B", "BETWEEN", "BY", "C", "CASE", "CAST", "COMMENT_LINE", "CONVERT", "D", "DESC", "DIGIT", "DISTINCT", "E", "ELSE", "END", "EXISTS", "F", "FROM", "G", "GROUP", "H", "I", "IN", "INTO", "J", "K", "L", "LIKE", "M", "MATCH", "N", "NOT", "NUMBER", "O", "OR", "ORDER", "P", "Q", "R", "S", "SELECT", "SIMPLE_FILE", "SOME", "STRING", "SYSTEMVAR", "T", "THEN", "TOKEN", "TOP", "T_ALL", "T_AND", "T_ANY", "T_BETWEEN", "T_BITWISE_AND", "T_BITWISE_NOT", "T_BITWISE_OR", "T_BITWISE_XOR", "T_CASE", "T_CASE_ELSE", "T_CASE_WHEN", "T_COLUMN", "T_COLUMNLIST", "T_CONVERT", "T_DISTINCT", "T_DIVIDE", "T_EQUAL", "T_EXISTS", "T_EXPRESSIONLIST", "T_FILE", "T_FILEOPTION", "T_FROM", "T_FUNCTIONCALL", "T_GREATER", "T_GROUPBY", "T_IN", "T_INTEGER", "T_INTO", "T_LESS", "T_LIKE", "T_MATCH", "T_MINUS", "T_MODULO", "T_NOT", "T_NOTBETWEEN", "T_NOTEQUAL", "T_NOTGREATER", "T_NOTIN", "T_NOTLESS", "T_NOTLIKE", "T_NOTMATCH", "T_OP_BINARY", "T_OP_UNARY", "T_OR", "T_ORDERBY", "T_ORDERBY_ASC", "T_ORDERBY_COLUMN", "T_ORDERBY_DESC", "T_PLUS", "T_PRODUCT", "T_ROOT", "T_SELECT", "T_STRING", "T_SUBQUERY", "T_SYSTEMVAR", "T_TOP", "T_USE", "T_WHERE", "U", "USE", "V", "W", "WHEN", "WHERE", "WS", "X", "Y", "Z", "'!<'", "'!='", "'!>'", "'%'", "'&'", "'('", "')'", "'*'", "'+'", "','", "'-'", "'/'", "';'", "'<'", "'<='", "'<>'", "'='", "'>'", "'>='", "'['", "']'", "'^'", "'|'", "'~'"
	};
	public const int EOF=-1;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int A=4;
	public const int ALL=5;
	public const int AND=6;
	public const int ANY=7;
	public const int AS=8;
	public const int ASC=9;
	public const int B=10;
	public const int BETWEEN=11;
	public const int BY=12;
	public const int C=13;
	public const int CASE=14;
	public const int CAST=15;
	public const int COMMENT_LINE=16;
	public const int CONVERT=17;
	public const int D=18;
	public const int DESC=19;
	public const int DIGIT=20;
	public const int DISTINCT=21;
	public const int E=22;
	public const int ELSE=23;
	public const int END=24;
	public const int EXISTS=25;
	public const int F=26;
	public const int FROM=27;
	public const int G=28;
	public const int GROUP=29;
	public const int H=30;
	public const int I=31;
	public const int IN=32;
	public const int INTO=33;
	public const int J=34;
	public const int K=35;
	public const int L=36;
	public const int LIKE=37;
	public const int M=38;
	public const int MATCH=39;
	public const int N=40;
	public const int NOT=41;
	public const int NUMBER=42;
	public const int O=43;
	public const int OR=44;
	public const int ORDER=45;
	public const int P=46;
	public const int Q=47;
	public const int R=48;
	public const int S=49;
	public const int SELECT=50;
	public const int SIMPLE_FILE=51;
	public const int SOME=52;
	public const int STRING=53;
	public const int SYSTEMVAR=54;
	public const int T=55;
	public const int THEN=56;
	public const int TOKEN=57;
	public const int TOP=58;
	public const int T_ALL=59;
	public const int T_AND=60;
	public const int T_ANY=61;
	public const int T_BETWEEN=62;
	public const int T_BITWISE_AND=63;
	public const int T_BITWISE_NOT=64;
	public const int T_BITWISE_OR=65;
	public const int T_BITWISE_XOR=66;
	public const int T_CASE=67;
	public const int T_CASE_ELSE=68;
	public const int T_CASE_WHEN=69;
	public const int T_COLUMN=70;
	public const int T_COLUMNLIST=71;
	public const int T_CONVERT=72;
	public const int T_DISTINCT=73;
	public const int T_DIVIDE=74;
	public const int T_EQUAL=75;
	public const int T_EXISTS=76;
	public const int T_EXPRESSIONLIST=77;
	public const int T_FILE=78;
	public const int T_FILEOPTION=79;
	public const int T_FROM=80;
	public const int T_FUNCTIONCALL=81;
	public const int T_GREATER=82;
	public const int T_GROUPBY=83;
	public const int T_IN=84;
	public const int T_INTEGER=85;
	public const int T_INTO=86;
	public const int T_LESS=87;
	public const int T_LIKE=88;
	public const int T_MATCH=89;
	public const int T_MINUS=90;
	public const int T_MODULO=91;
	public const int T_NOT=92;
	public const int T_NOTBETWEEN=93;
	public const int T_NOTEQUAL=94;
	public const int T_NOTGREATER=95;
	public const int T_NOTIN=96;
	public const int T_NOTLESS=97;
	public const int T_NOTLIKE=98;
	public const int T_NOTMATCH=99;
	public const int T_OP_BINARY=100;
	public const int T_OP_UNARY=101;
	public const int T_OR=102;
	public const int T_ORDERBY=103;
	public const int T_ORDERBY_ASC=104;
	public const int T_ORDERBY_COLUMN=105;
	public const int T_ORDERBY_DESC=106;
	public const int T_PLUS=107;
	public const int T_PRODUCT=108;
	public const int T_ROOT=109;
	public const int T_SELECT=110;
	public const int T_STRING=111;
	public const int T_SUBQUERY=112;
	public const int T_SYSTEMVAR=113;
	public const int T_TOP=114;
	public const int T_USE=115;
	public const int T_WHERE=116;
	public const int U=117;
	public const int USE=118;
	public const int V=119;
	public const int W=120;
	public const int WHEN=121;
	public const int WHERE=122;
	public const int WS=123;
	public const int X=124;
	public const int Y=125;
	public const int Z=126;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false, false, false, false, false, false, false, false, false, false, 
				false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public gqlParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public gqlParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}
	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return gqlParser.tokenNames; } }
	public override string GrammarFileName { get { return "C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g"; } }


	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules

	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_parse() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_parse() {}

	// $ANTLR start "parse"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:89:1: parse : ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) ;
	[GrammarRule("parse")]
	private AstParserRuleReturnScope<object, IToken> parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS1 = default(IToken);
	    IToken WS3 = default(IToken);
	    IToken EOF4 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> commands2 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS1_tree = default(object);
	    object WS3_tree = default(object);
	    object EOF4_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
	    RewriteRuleSubtreeStream stream_commands=new RewriteRuleSubtreeStream(adaptor,"rule commands");
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(89, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:2: ( ( WS )? ( commands ( WS )? )? EOF -> ^( T_ROOT ( commands )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:4: ( WS )? ( commands ( WS )? )? EOF
			{
			DebugLocation(90, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:4: ( WS )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
			int LA1_0 = input.LA(1);

			if ((LA1_0==WS))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:4: WS
				{
				DebugLocation(90, 4);
				WS1=(IToken)Match(input,WS,Follow._WS_in_parse312);  
				stream_WS.Add(WS1);


				}
				break;

			}
			} finally { DebugExitSubRule(1); }

			DebugLocation(90, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:8: ( commands ( WS )? )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
			int LA3_0 = input.LA(1);

			if ((LA3_0==SELECT||LA3_0==USE))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:9: commands ( WS )?
				{
				DebugLocation(90, 9);
				PushFollow(Follow._commands_in_parse316);
				commands2=commands();
				PopFollow();

				stream_commands.Add(commands2.Tree);
				DebugLocation(90, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:18: ( WS )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_0 = input.LA(1);

				if ((LA2_0==WS))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:90:18: WS
					{
					DebugLocation(90, 18);
					WS3=(IToken)Match(input,WS,Follow._WS_in_parse318);  
					stream_WS.Add(WS3);


					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
			} finally { DebugExitSubRule(3); }

			DebugLocation(90, 24);
			EOF4=(IToken)Match(input,EOF,Follow._EOF_in_parse323);  
			stream_EOF.Add(EOF4);



			{
			// AST REWRITE
			// elements: commands
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 91:2: -> ^( T_ROOT ( commands )? )
			{
				DebugLocation(91, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:91:5: ^( T_ROOT ( commands )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(91, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ROOT, "T_ROOT"), root_1);

				DebugLocation(91, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:91:14: ( commands )?
				if (stream_commands.HasNext)
				{
					DebugLocation(91, 14);
					adaptor.AddChild(root_1, stream_commands.NextTree());

				}
				stream_commands.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
	    }
	 	DebugLocation(92, 1);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_commands() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_commands() {}

	// $ANTLR start "commands"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:94:1: commands : command ( ( WS )? ( ';' ( WS )? )? command )* -> ( command )+ ;
	[GrammarRule("commands")]
	private AstParserRuleReturnScope<object, IToken> commands()
	{
		EnterRule_commands();
		EnterRule("commands", 2);
		TraceIn("commands", 2);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS6 = default(IToken);
	    IToken char_literal7 = default(IToken);
	    IToken WS8 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> command5 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> command9 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS6_tree = default(object);
	    object char_literal7_tree = default(object);
	    object WS8_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
	    RewriteRuleSubtreeStream stream_command=new RewriteRuleSubtreeStream(adaptor,"rule command");
		try { DebugEnterRule(GrammarFileName, "commands");
		DebugLocation(94, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:2: ( command ( ( WS )? ( ';' ( WS )? )? command )* -> ( command )+ )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:4: command ( ( WS )? ( ';' ( WS )? )? command )*
			{
			DebugLocation(95, 4);
			PushFollow(Follow._command_in_commands346);
			command5=command();
			PopFollow();

			stream_command.Add(command5.Tree);
			DebugLocation(95, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:12: ( ( WS )? ( ';' ( WS )? )? command )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
				int LA7_0 = input.LA(1);

				if ((LA7_0==WS))
				{
					int LA7_1 = input.LA(2);

					if ((LA7_1==SELECT||LA7_1==USE||LA7_1==139))
					{
						alt7 = 1;
					}


				}
				else if ((LA7_0==SELECT||LA7_0==USE||LA7_0==139))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:13: ( WS )? ( ';' ( WS )? )? command
					{
					DebugLocation(95, 13);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:13: ( WS )?
					int alt4=2;
					try { DebugEnterSubRule(4);
					try { DebugEnterDecision(4, decisionCanBacktrack[4]);
					int LA4_0 = input.LA(1);

					if ((LA4_0==WS))
					{
						alt4 = 1;
					}
					} finally { DebugExitDecision(4); }
					switch (alt4)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:13: WS
						{
						DebugLocation(95, 13);
						WS6=(IToken)Match(input,WS,Follow._WS_in_commands349);  
						stream_WS.Add(WS6);


						}
						break;

					}
					} finally { DebugExitSubRule(4); }

					DebugLocation(95, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:17: ( ';' ( WS )? )?
					int alt6=2;
					try { DebugEnterSubRule(6);
					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
					int LA6_0 = input.LA(1);

					if ((LA6_0==139))
					{
						alt6 = 1;
					}
					} finally { DebugExitDecision(6); }
					switch (alt6)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:18: ';' ( WS )?
						{
						DebugLocation(95, 18);
						char_literal7=(IToken)Match(input,139,Follow._139_in_commands353);  
						stream_139.Add(char_literal7);

						DebugLocation(95, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:22: ( WS )?
						int alt5=2;
						try { DebugEnterSubRule(5);
						try { DebugEnterDecision(5, decisionCanBacktrack[5]);
						int LA5_0 = input.LA(1);

						if ((LA5_0==WS))
						{
							alt5 = 1;
						}
						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:95:22: WS
							{
							DebugLocation(95, 22);
							WS8=(IToken)Match(input,WS,Follow._WS_in_commands355);  
							stream_WS.Add(WS8);


							}
							break;

						}
						} finally { DebugExitSubRule(5); }


						}
						break;

					}
					} finally { DebugExitSubRule(6); }

					DebugLocation(95, 28);
					PushFollow(Follow._command_in_commands360);
					command9=command();
					PopFollow();

					stream_command.Add(command9.Tree);

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 96:2: -> ( command )+
			{
				DebugLocation(96, 5);
				if (!(stream_command.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_command.HasNext )
				{
					DebugLocation(96, 5);
					adaptor.AddChild(root_0, stream_command.NextTree());

				}
				stream_command.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("commands", 2);
			LeaveRule("commands", 2);
			LeaveRule_commands();
	    }
	 	DebugLocation(97, 1);
		} finally { DebugExitRule(GrammarFileName, "commands"); }
		return retval;

	}
	// $ANTLR end "commands"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_command() {}

	// $ANTLR start "command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:99:1: command : ( select_command | use_command );
	[GrammarRule("command")]
	private AstParserRuleReturnScope<object, IToken> command()
	{
		EnterRule_command();
		EnterRule("command", 3);
		TraceIn("command", 3);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> select_command10 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> use_command11 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "command");
		DebugLocation(99, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:2: ( select_command | use_command )
			int alt8=2;
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			int LA8_0 = input.LA(1);

			if ((LA8_0==SELECT))
			{
				alt8 = 1;
			}
			else if ((LA8_0==USE))
			{
				alt8 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 8, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:100:4: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(100, 4);
				PushFollow(Follow._select_command_in_command380);
				select_command10=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command10.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:101:4: use_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(101, 4);
				PushFollow(Follow._use_command_in_command385);
				use_command11=use_command();
				PopFollow();

				adaptor.AddChild(root_0, use_command11.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("command", 3);
			LeaveRule("command", 3);
			LeaveRule_command();
	    }
	 	DebugLocation(102, 1);
		} finally { DebugExitRule(GrammarFileName, "command"); }
		return retval;

	}
	// $ANTLR end "command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_select_command() {}

	// $ANTLR start "select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:107:1: select_command : SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) ;
	[GrammarRule("select_command")]
	private AstParserRuleReturnScope<object, IToken> select_command()
	{
		EnterRule_select_command();
		EnterRule("select_command", 4);
		TraceIn("select_command", 4);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken SELECT12 = default(IToken);
	    IToken WS13 = default(IToken);
	    IToken WS15 = default(IToken);
	    IToken WS17 = default(IToken);
	    IToken WS19 = default(IToken);
	    IToken WS21 = default(IToken);
	    IToken WS23 = default(IToken);
	    IToken WS25 = default(IToken);
	    IToken WS27 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> distinct_clause14 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> top_clause16 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column_list18 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> into_clause20 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause22 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> where_clause24 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> groupby_clause26 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_clause28 = default(AstParserRuleReturnScope<object, IToken>);

	    object SELECT12_tree = default(object);
	    object WS13_tree = default(object);
	    object WS15_tree = default(object);
	    object WS17_tree = default(object);
	    object WS19_tree = default(object);
	    object WS21_tree = default(object);
	    object WS23_tree = default(object);
	    object WS25_tree = default(object);
	    object WS27_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SELECT=new RewriteRuleITokenStream(adaptor,"token SELECT");
	    RewriteRuleSubtreeStream stream_groupby_clause=new RewriteRuleSubtreeStream(adaptor,"rule groupby_clause");
	    RewriteRuleSubtreeStream stream_distinct_clause=new RewriteRuleSubtreeStream(adaptor,"rule distinct_clause");
	    RewriteRuleSubtreeStream stream_from_clause=new RewriteRuleSubtreeStream(adaptor,"rule from_clause");
	    RewriteRuleSubtreeStream stream_column_list=new RewriteRuleSubtreeStream(adaptor,"rule column_list");
	    RewriteRuleSubtreeStream stream_where_clause=new RewriteRuleSubtreeStream(adaptor,"rule where_clause");
	    RewriteRuleSubtreeStream stream_into_clause=new RewriteRuleSubtreeStream(adaptor,"rule into_clause");
	    RewriteRuleSubtreeStream stream_top_clause=new RewriteRuleSubtreeStream(adaptor,"rule top_clause");
	    RewriteRuleSubtreeStream stream_orderby_clause=new RewriteRuleSubtreeStream(adaptor,"rule orderby_clause");
		try { DebugEnterRule(GrammarFileName, "select_command");
		DebugLocation(107, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:2: ( SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )? -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:4: SELECT ( WS distinct_clause )? ( WS top_clause )? WS column_list ( WS into_clause )? ( WS from_clause )? ( WS where_clause )? ( WS groupby_clause )? ( WS orderby_clause )?
			{
			DebugLocation(108, 4);
			SELECT12=(IToken)Match(input,SELECT,Follow._SELECT_in_select_command399);  
			stream_SELECT.Add(SELECT12);

			DebugLocation(108, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:11: ( WS distinct_clause )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			int LA9_0 = input.LA(1);

			if ((LA9_0==WS))
			{
				int LA9_1 = input.LA(2);

				if ((LA9_1==ALL||LA9_1==DISTINCT))
				{
					alt9 = 1;
				}
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:12: WS distinct_clause
				{
				DebugLocation(108, 12);
				WS13=(IToken)Match(input,WS,Follow._WS_in_select_command402);  
				stream_WS.Add(WS13);

				DebugLocation(108, 15);
				PushFollow(Follow._distinct_clause_in_select_command404);
				distinct_clause14=distinct_clause();
				PopFollow();

				stream_distinct_clause.Add(distinct_clause14.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(9); }

			DebugLocation(108, 33);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:33: ( WS top_clause )?
			int alt10=2;
			try { DebugEnterSubRule(10);
			try { DebugEnterDecision(10, decisionCanBacktrack[10]);
			int LA10_0 = input.LA(1);

			if ((LA10_0==WS))
			{
				int LA10_1 = input.LA(2);

				if ((LA10_1==TOP))
				{
					alt10 = 1;
				}
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:34: WS top_clause
				{
				DebugLocation(108, 34);
				WS15=(IToken)Match(input,WS,Follow._WS_in_select_command409);  
				stream_WS.Add(WS15);

				DebugLocation(108, 37);
				PushFollow(Follow._top_clause_in_select_command411);
				top_clause16=top_clause();
				PopFollow();

				stream_top_clause.Add(top_clause16.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(10); }

			DebugLocation(108, 50);
			WS17=(IToken)Match(input,WS,Follow._WS_in_select_command415);  
			stream_WS.Add(WS17);

			DebugLocation(108, 53);
			PushFollow(Follow._column_list_in_select_command417);
			column_list18=column_list();
			PopFollow();

			stream_column_list.Add(column_list18.Tree);
			DebugLocation(108, 65);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:65: ( WS into_clause )?
			int alt11=2;
			try { DebugEnterSubRule(11);
			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
			int LA11_0 = input.LA(1);

			if ((LA11_0==WS))
			{
				int LA11_1 = input.LA(2);

				if ((LA11_1==INTO))
				{
					alt11 = 1;
				}
			}
			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:66: WS into_clause
				{
				DebugLocation(108, 66);
				WS19=(IToken)Match(input,WS,Follow._WS_in_select_command420);  
				stream_WS.Add(WS19);

				DebugLocation(108, 69);
				PushFollow(Follow._into_clause_in_select_command422);
				into_clause20=into_clause();
				PopFollow();

				stream_into_clause.Add(into_clause20.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(11); }

			DebugLocation(108, 83);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:83: ( WS from_clause )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
			int LA12_0 = input.LA(1);

			if ((LA12_0==WS))
			{
				int LA12_1 = input.LA(2);

				if ((LA12_1==FROM))
				{
					alt12 = 1;
				}
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:84: WS from_clause
				{
				DebugLocation(108, 84);
				WS21=(IToken)Match(input,WS,Follow._WS_in_select_command427);  
				stream_WS.Add(WS21);

				DebugLocation(108, 87);
				PushFollow(Follow._from_clause_in_select_command429);
				from_clause22=from_clause();
				PopFollow();

				stream_from_clause.Add(from_clause22.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(108, 101);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:101: ( WS where_clause )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, decisionCanBacktrack[13]);
			int LA13_0 = input.LA(1);

			if ((LA13_0==WS))
			{
				int LA13_1 = input.LA(2);

				if ((LA13_1==WHERE))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:102: WS where_clause
				{
				DebugLocation(108, 102);
				WS23=(IToken)Match(input,WS,Follow._WS_in_select_command434);  
				stream_WS.Add(WS23);

				DebugLocation(108, 105);
				PushFollow(Follow._where_clause_in_select_command436);
				where_clause24=where_clause();
				PopFollow();

				stream_where_clause.Add(where_clause24.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(108, 120);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:120: ( WS groupby_clause )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
			int LA14_0 = input.LA(1);

			if ((LA14_0==WS))
			{
				int LA14_1 = input.LA(2);

				if ((LA14_1==GROUP))
				{
					alt14 = 1;
				}
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:121: WS groupby_clause
				{
				DebugLocation(108, 121);
				WS25=(IToken)Match(input,WS,Follow._WS_in_select_command441);  
				stream_WS.Add(WS25);

				DebugLocation(108, 124);
				PushFollow(Follow._groupby_clause_in_select_command443);
				groupby_clause26=groupby_clause();
				PopFollow();

				stream_groupby_clause.Add(groupby_clause26.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(108, 141);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:141: ( WS orderby_clause )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
			int LA15_0 = input.LA(1);

			if ((LA15_0==WS))
			{
				int LA15_1 = input.LA(2);

				if ((LA15_1==ORDER))
				{
					alt15 = 1;
				}
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:108:142: WS orderby_clause
				{
				DebugLocation(108, 142);
				WS27=(IToken)Match(input,WS,Follow._WS_in_select_command448);  
				stream_WS.Add(WS27);

				DebugLocation(108, 145);
				PushFollow(Follow._orderby_clause_in_select_command450);
				orderby_clause28=orderby_clause();
				PopFollow();

				stream_orderby_clause.Add(orderby_clause28.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(15); }



			{
			// AST REWRITE
			// elements: from_clause, top_clause, column_list, groupby_clause, where_clause, into_clause, distinct_clause, orderby_clause
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 109:3: -> ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
			{
				DebugLocation(109, 6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:6: ^( T_SELECT ( distinct_clause )? ( top_clause )? column_list ( into_clause )? ( from_clause )? ( where_clause )? ( groupby_clause )? ( orderby_clause )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(109, 8);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SELECT, "T_SELECT"), root_1);

				DebugLocation(109, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:17: ( distinct_clause )?
				if (stream_distinct_clause.HasNext)
				{
					DebugLocation(109, 17);
					adaptor.AddChild(root_1, stream_distinct_clause.NextTree());

				}
				stream_distinct_clause.Reset();
				DebugLocation(109, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:34: ( top_clause )?
				if (stream_top_clause.HasNext)
				{
					DebugLocation(109, 34);
					adaptor.AddChild(root_1, stream_top_clause.NextTree());

				}
				stream_top_clause.Reset();
				DebugLocation(109, 46);
				adaptor.AddChild(root_1, stream_column_list.NextTree());
				DebugLocation(109, 58);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:58: ( into_clause )?
				if (stream_into_clause.HasNext)
				{
					DebugLocation(109, 58);
					adaptor.AddChild(root_1, stream_into_clause.NextTree());

				}
				stream_into_clause.Reset();
				DebugLocation(109, 71);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:71: ( from_clause )?
				if (stream_from_clause.HasNext)
				{
					DebugLocation(109, 71);
					adaptor.AddChild(root_1, stream_from_clause.NextTree());

				}
				stream_from_clause.Reset();
				DebugLocation(109, 84);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:84: ( where_clause )?
				if (stream_where_clause.HasNext)
				{
					DebugLocation(109, 84);
					adaptor.AddChild(root_1, stream_where_clause.NextTree());

				}
				stream_where_clause.Reset();
				DebugLocation(109, 98);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:98: ( groupby_clause )?
				if (stream_groupby_clause.HasNext)
				{
					DebugLocation(109, 98);
					adaptor.AddChild(root_1, stream_groupby_clause.NextTree());

				}
				stream_groupby_clause.Reset();
				DebugLocation(109, 114);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:109:114: ( orderby_clause )?
				if (stream_orderby_clause.HasNext)
				{
					DebugLocation(109, 114);
					adaptor.AddChild(root_1, stream_orderby_clause.NextTree());

				}
				stream_orderby_clause.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("select_command", 4);
			LeaveRule("select_command", 4);
			LeaveRule_select_command();
	    }
	 	DebugLocation(110, 1);
		} finally { DebugExitRule(GrammarFileName, "select_command"); }
		return retval;

	}
	// $ANTLR end "select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_distinct_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_distinct_clause() {}

	// $ANTLR start "distinct_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:112:1: distinct_clause : ( DISTINCT -> T_DISTINCT | ALL -> T_ALL );
	[GrammarRule("distinct_clause")]
	private AstParserRuleReturnScope<object, IToken> distinct_clause()
	{
		EnterRule_distinct_clause();
		EnterRule("distinct_clause", 5);
		TraceIn("distinct_clause", 5);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken DISTINCT29 = default(IToken);
	    IToken ALL30 = default(IToken);

	    object DISTINCT29_tree = default(object);
	    object ALL30_tree = default(object);
	    RewriteRuleITokenStream stream_DISTINCT=new RewriteRuleITokenStream(adaptor,"token DISTINCT");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");

		try { DebugEnterRule(GrammarFileName, "distinct_clause");
		DebugLocation(112, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:2: ( DISTINCT -> T_DISTINCT | ALL -> T_ALL )
			int alt16=2;
			try { DebugEnterDecision(16, decisionCanBacktrack[16]);
			int LA16_0 = input.LA(1);

			if ((LA16_0==DISTINCT))
			{
				alt16 = 1;
			}
			else if ((LA16_0==ALL))
			{
				alt16 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 16, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(16); }
			switch (alt16)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:113:4: DISTINCT
				{
				DebugLocation(113, 4);
				DISTINCT29=(IToken)Match(input,DISTINCT,Follow._DISTINCT_in_distinct_clause495);  
				stream_DISTINCT.Add(DISTINCT29);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 113:13: -> T_DISTINCT
				{
					DebugLocation(113, 16);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DISTINCT, "T_DISTINCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:114:4: ALL
				{
				DebugLocation(114, 4);
				ALL30=(IToken)Match(input,ALL,Follow._ALL_in_distinct_clause504);  
				stream_ALL.Add(ALL30);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 114:8: -> T_ALL
				{
					DebugLocation(114, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ALL, "T_ALL"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("distinct_clause", 5);
			LeaveRule("distinct_clause", 5);
			LeaveRule_distinct_clause();
	    }
	 	DebugLocation(115, 1);
		} finally { DebugExitRule(GrammarFileName, "distinct_clause"); }
		return retval;

	}
	// $ANTLR end "distinct_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_top_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_top_clause() {}

	// $ANTLR start "top_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:117:1: top_clause : TOP WS expression -> ^( T_TOP expression ) ;
	[GrammarRule("top_clause")]
	private AstParserRuleReturnScope<object, IToken> top_clause()
	{
		EnterRule_top_clause();
		EnterRule("top_clause", 6);
		TraceIn("top_clause", 6);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOP31 = default(IToken);
	    IToken WS32 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression33 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOP31_tree = default(object);
	    object WS32_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_TOP=new RewriteRuleITokenStream(adaptor,"token TOP");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "top_clause");
		DebugLocation(117, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:2: ( TOP WS expression -> ^( T_TOP expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:118:4: TOP WS expression
			{
			DebugLocation(118, 4);
			TOP31=(IToken)Match(input,TOP,Follow._TOP_in_top_clause520);  
			stream_TOP.Add(TOP31);

			DebugLocation(118, 8);
			WS32=(IToken)Match(input,WS,Follow._WS_in_top_clause522);  
			stream_WS.Add(WS32);

			DebugLocation(118, 11);
			PushFollow(Follow._expression_in_top_clause524);
			expression33=expression();
			PopFollow();

			stream_expression.Add(expression33.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 119:2: -> ^( T_TOP expression )
			{
				DebugLocation(119, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:119:5: ^( T_TOP expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(119, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_TOP, "T_TOP"), root_1);

				DebugLocation(119, 13);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("top_clause", 6);
			LeaveRule("top_clause", 6);
			LeaveRule_top_clause();
	    }
	 	DebugLocation(120, 1);
		} finally { DebugExitRule(GrammarFileName, "top_clause"); }
		return retval;

	}
	// $ANTLR end "top_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column_list() {}

	// $ANTLR start "column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:122:1: column_list : column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) ;
	[GrammarRule("column_list")]
	private AstParserRuleReturnScope<object, IToken> column_list()
	{
		EnterRule_column_list();
		EnterRule("column_list", 7);
		TraceIn("column_list", 7);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS35 = default(IToken);
	    IToken char_literal36 = default(IToken);
	    IToken WS37 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> column34 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> column38 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS35_tree = default(object);
	    object char_literal36_tree = default(object);
	    object WS37_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleSubtreeStream stream_column=new RewriteRuleSubtreeStream(adaptor,"rule column");
		try { DebugEnterRule(GrammarFileName, "column_list");
		DebugLocation(122, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:2: ( column ( ( WS )? ',' ( WS )? column )* -> ^( T_COLUMNLIST ( column )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:4: column ( ( WS )? ',' ( WS )? column )*
			{
			DebugLocation(123, 4);
			PushFollow(Follow._column_in_column_list546);
			column34=column();
			PopFollow();

			stream_column.Add(column34.Tree);
			DebugLocation(123, 11);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:11: ( ( WS )? ',' ( WS )? column )*
			try { DebugEnterSubRule(19);
			while (true)
			{
				int alt19=2;
				try { DebugEnterDecision(19, decisionCanBacktrack[19]);
				int LA19_0 = input.LA(1);

				if ((LA19_0==WS))
				{
					int LA19_1 = input.LA(2);

					if ((LA19_1==136))
					{
						alt19 = 1;
					}


				}
				else if ((LA19_0==136))
				{
					alt19 = 1;
				}


				} finally { DebugExitDecision(19); }
				switch ( alt19 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:12: ( WS )? ',' ( WS )? column
					{
					DebugLocation(123, 12);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:12: ( WS )?
					int alt17=2;
					try { DebugEnterSubRule(17);
					try { DebugEnterDecision(17, decisionCanBacktrack[17]);
					int LA17_0 = input.LA(1);

					if ((LA17_0==WS))
					{
						alt17 = 1;
					}
					} finally { DebugExitDecision(17); }
					switch (alt17)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:12: WS
						{
						DebugLocation(123, 12);
						WS35=(IToken)Match(input,WS,Follow._WS_in_column_list549);  
						stream_WS.Add(WS35);


						}
						break;

					}
					} finally { DebugExitSubRule(17); }

					DebugLocation(123, 16);
					char_literal36=(IToken)Match(input,136,Follow._136_in_column_list552);  
					stream_136.Add(char_literal36);

					DebugLocation(123, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:20: ( WS )?
					int alt18=2;
					try { DebugEnterSubRule(18);
					try { DebugEnterDecision(18, decisionCanBacktrack[18]);
					int LA18_0 = input.LA(1);

					if ((LA18_0==WS))
					{
						alt18 = 1;
					}
					} finally { DebugExitDecision(18); }
					switch (alt18)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:123:20: WS
						{
						DebugLocation(123, 20);
						WS37=(IToken)Match(input,WS,Follow._WS_in_column_list554);  
						stream_WS.Add(WS37);


						}
						break;

					}
					} finally { DebugExitSubRule(18); }

					DebugLocation(123, 24);
					PushFollow(Follow._column_in_column_list557);
					column38=column();
					PopFollow();

					stream_column.Add(column38.Tree);

					}
					break;

				default:
					goto loop19;
				}
			}

			loop19:
				;

			} finally { DebugExitSubRule(19); }



			{
			// AST REWRITE
			// elements: column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 124:2: -> ^( T_COLUMNLIST ( column )* )
			{
				DebugLocation(124, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:5: ^( T_COLUMNLIST ( column )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(124, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMNLIST, "T_COLUMNLIST"), root_1);

				DebugLocation(124, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:124:20: ( column )*
				while ( stream_column.HasNext )
				{
					DebugLocation(124, 20);
					adaptor.AddChild(root_1, stream_column.NextTree());

				}
				stream_column.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column_list", 7);
			LeaveRule("column_list", 7);
			LeaveRule_column_list();
	    }
	 	DebugLocation(125, 1);
		} finally { DebugExitRule(GrammarFileName, "column_list"); }
		return retval;

	}
	// $ANTLR end "column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_column() {}

	// $ANTLR start "column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:127:1: column : ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) );
	[GrammarRule("column")]
	private AstParserRuleReturnScope<object, IToken> column()
	{
		EnterRule_column();
		EnterRule("column", 8);
		TraceIn("column", 8);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal39 = default(IToken);
	    IToken WS41 = default(IToken);
	    IToken SIMPLE_FILE42 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression40 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal39_tree = default(object);
	    object WS41_tree = default(object);
	    object SIMPLE_FILE42_tree = default(object);
	    RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "column");
		DebugLocation(127, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:2: ( '*' -> ^( T_COLUMN '*' ) | expression ( WS SIMPLE_FILE )? -> ^( T_COLUMN expression ( SIMPLE_FILE )? ) )
			int alt21=2;
			try { DebugEnterDecision(21, decisionCanBacktrack[21]);
			int LA21_0 = input.LA(1);

			if ((LA21_0==134))
			{
				alt21 = 1;
			}
			else if (((LA21_0>=CASE && LA21_0<=CAST)||LA21_0==CONVERT||LA21_0==EXISTS||(LA21_0>=NOT && LA21_0<=NUMBER)||LA21_0==SIMPLE_FILE||(LA21_0>=STRING && LA21_0<=SYSTEMVAR)||LA21_0==TOKEN||LA21_0==132))
			{
				alt21 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 21, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:4: '*'
				{
				DebugLocation(128, 4);
				char_literal39=(IToken)Match(input,134,Follow._134_in_column581);  
				stream_134.Add(char_literal39);



				{
				// AST REWRITE
				// elements: 134
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 128:8: -> ^( T_COLUMN '*' )
				{
					DebugLocation(128, 11);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:128:11: ^( T_COLUMN '*' )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(128, 13);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(128, 22);
					adaptor.AddChild(root_1, stream_134.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:4: expression ( WS SIMPLE_FILE )?
				{
				DebugLocation(129, 4);
				PushFollow(Follow._expression_in_column595);
				expression40=expression();
				PopFollow();

				stream_expression.Add(expression40.Tree);
				DebugLocation(129, 15);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:15: ( WS SIMPLE_FILE )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, decisionCanBacktrack[20]);
				int LA20_0 = input.LA(1);

				if ((LA20_0==WS))
				{
					int LA20_1 = input.LA(2);

					if ((LA20_1==SIMPLE_FILE))
					{
						alt20 = 1;
					}
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:16: WS SIMPLE_FILE
					{
					DebugLocation(129, 16);
					WS41=(IToken)Match(input,WS,Follow._WS_in_column598);  
					stream_WS.Add(WS41);

					DebugLocation(129, 19);
					SIMPLE_FILE42=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_column600);  
					stream_SIMPLE_FILE.Add(SIMPLE_FILE42);


					}
					break;

				}
				} finally { DebugExitSubRule(20); }



				{
				// AST REWRITE
				// elements: expression, SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 129:33: -> ^( T_COLUMN expression ( SIMPLE_FILE )? )
				{
					DebugLocation(129, 36);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:36: ^( T_COLUMN expression ( SIMPLE_FILE )? )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(129, 38);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(129, 47);
					adaptor.AddChild(root_1, stream_expression.NextTree());
					DebugLocation(129, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:129:58: ( SIMPLE_FILE )?
					if (stream_SIMPLE_FILE.HasNext)
					{
						DebugLocation(129, 58);
						adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					}
					stream_SIMPLE_FILE.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("column", 8);
			LeaveRule("column", 8);
			LeaveRule_column();
	    }
	 	DebugLocation(130, 1);
		} finally { DebugExitRule(GrammarFileName, "column"); }
		return retval;

	}
	// $ANTLR end "column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_into_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_into_clause() {}

	// $ANTLR start "into_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:131:1: into_clause : INTO WS file -> ^( T_INTO file ) ;
	[GrammarRule("into_clause")]
	private AstParserRuleReturnScope<object, IToken> into_clause()
	{
		EnterRule_into_clause();
		EnterRule("into_clause", 9);
		TraceIn("into_clause", 9);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken INTO43 = default(IToken);
	    IToken WS44 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file45 = default(AstParserRuleReturnScope<object, IToken>);

	    object INTO43_tree = default(object);
	    object WS44_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_INTO=new RewriteRuleITokenStream(adaptor,"token INTO");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "into_clause");
		DebugLocation(131, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:2: ( INTO WS file -> ^( T_INTO file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:4: INTO WS file
			{
			DebugLocation(132, 4);
			INTO43=(IToken)Match(input,INTO,Follow._INTO_in_into_clause623);  
			stream_INTO.Add(INTO43);

			DebugLocation(132, 9);
			WS44=(IToken)Match(input,WS,Follow._WS_in_into_clause625);  
			stream_WS.Add(WS44);

			DebugLocation(132, 12);
			PushFollow(Follow._file_in_into_clause627);
			file45=file();
			PopFollow();

			stream_file.Add(file45.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 132:17: -> ^( T_INTO file )
			{
				DebugLocation(132, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:132:20: ^( T_INTO file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(132, 22);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTO, "T_INTO"), root_1);

				DebugLocation(132, 29);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("into_clause", 9);
			LeaveRule("into_clause", 9);
			LeaveRule_into_clause();
	    }
	 	DebugLocation(133, 1);
		} finally { DebugExitRule(GrammarFileName, "into_clause"); }
		return retval;

	}
	// $ANTLR end "into_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause() {}

	// $ANTLR start "from_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:135:1: from_clause : FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) ;
	[GrammarRule("from_clause")]
	private AstParserRuleReturnScope<object, IToken> from_clause()
	{
		EnterRule_from_clause();
		EnterRule("from_clause", 10);
		TraceIn("from_clause", 10);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken FROM46 = default(IToken);
	    IToken WS47 = default(IToken);
	    IToken WS49 = default(IToken);
	    IToken char_literal50 = default(IToken);
	    IToken WS51 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> from_clause_item48 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> from_clause_item52 = default(AstParserRuleReturnScope<object, IToken>);

	    object FROM46_tree = default(object);
	    object WS47_tree = default(object);
	    object WS49_tree = default(object);
	    object char_literal50_tree = default(object);
	    object WS51_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleITokenStream stream_FROM=new RewriteRuleITokenStream(adaptor,"token FROM");
	    RewriteRuleSubtreeStream stream_from_clause_item=new RewriteRuleSubtreeStream(adaptor,"rule from_clause_item");
		try { DebugEnterRule(GrammarFileName, "from_clause");
		DebugLocation(135, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:2: ( FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )* -> ^( T_FROM ( from_clause_item )* ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:4: FROM WS from_clause_item ( ( WS )? ',' ( WS )? from_clause_item )*
			{
			DebugLocation(136, 4);
			FROM46=(IToken)Match(input,FROM,Follow._FROM_in_from_clause647);  
			stream_FROM.Add(FROM46);

			DebugLocation(136, 9);
			WS47=(IToken)Match(input,WS,Follow._WS_in_from_clause649);  
			stream_WS.Add(WS47);

			DebugLocation(136, 12);
			PushFollow(Follow._from_clause_item_in_from_clause651);
			from_clause_item48=from_clause_item();
			PopFollow();

			stream_from_clause_item.Add(from_clause_item48.Tree);
			DebugLocation(136, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:29: ( ( WS )? ',' ( WS )? from_clause_item )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, decisionCanBacktrack[24]);
				int LA24_0 = input.LA(1);

				if ((LA24_0==WS))
				{
					int LA24_1 = input.LA(2);

					if ((LA24_1==136))
					{
						alt24 = 1;
					}


				}
				else if ((LA24_0==136))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:30: ( WS )? ',' ( WS )? from_clause_item
					{
					DebugLocation(136, 30);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:30: ( WS )?
					int alt22=2;
					try { DebugEnterSubRule(22);
					try { DebugEnterDecision(22, decisionCanBacktrack[22]);
					int LA22_0 = input.LA(1);

					if ((LA22_0==WS))
					{
						alt22 = 1;
					}
					} finally { DebugExitDecision(22); }
					switch (alt22)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:30: WS
						{
						DebugLocation(136, 30);
						WS49=(IToken)Match(input,WS,Follow._WS_in_from_clause654);  
						stream_WS.Add(WS49);


						}
						break;

					}
					} finally { DebugExitSubRule(22); }

					DebugLocation(136, 34);
					char_literal50=(IToken)Match(input,136,Follow._136_in_from_clause657);  
					stream_136.Add(char_literal50);

					DebugLocation(136, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:38: ( WS )?
					int alt23=2;
					try { DebugEnterSubRule(23);
					try { DebugEnterDecision(23, decisionCanBacktrack[23]);
					int LA23_0 = input.LA(1);

					if ((LA23_0==WS))
					{
						alt23 = 1;
					}
					} finally { DebugExitDecision(23); }
					switch (alt23)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:38: WS
						{
						DebugLocation(136, 38);
						WS51=(IToken)Match(input,WS,Follow._WS_in_from_clause659);  
						stream_WS.Add(WS51);


						}
						break;

					}
					} finally { DebugExitSubRule(23); }

					DebugLocation(136, 42);
					PushFollow(Follow._from_clause_item_in_from_clause662);
					from_clause_item52=from_clause_item();
					PopFollow();

					stream_from_clause_item.Add(from_clause_item52.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: from_clause_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 136:61: -> ^( T_FROM ( from_clause_item )* )
			{
				DebugLocation(136, 64);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:64: ^( T_FROM ( from_clause_item )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(136, 66);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FROM, "T_FROM"), root_1);

				DebugLocation(136, 73);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:136:73: ( from_clause_item )*
				while ( stream_from_clause_item.HasNext )
				{
					DebugLocation(136, 73);
					adaptor.AddChild(root_1, stream_from_clause_item.NextTree());

				}
				stream_from_clause_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause", 10);
			LeaveRule("from_clause", 10);
			LeaveRule_from_clause();
	    }
	 	DebugLocation(137, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause"); }
		return retval;

	}
	// $ANTLR end "from_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_from_clause_item() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_from_clause_item() {}

	// $ANTLR start "from_clause_item"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:139:1: from_clause_item : ( STRING -> ^( T_FILE STRING ) | file | subquery );
	[GrammarRule("from_clause_item")]
	private AstParserRuleReturnScope<object, IToken> from_clause_item()
	{
		EnterRule_from_clause_item();
		EnterRule("from_clause_item", 11);
		TraceIn("from_clause_item", 11);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING53 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file54 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery55 = default(AstParserRuleReturnScope<object, IToken>);

	    object STRING53_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "from_clause_item");
		DebugLocation(139, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:2: ( STRING -> ^( T_FILE STRING ) | file | subquery )
			int alt25=3;
			try { DebugEnterDecision(25, decisionCanBacktrack[25]);
			switch (input.LA(1))
			{
			case STRING:
				{
				alt25 = 1;
				}
				break;
			case SIMPLE_FILE:
			case 146:
				{
				alt25 = 2;
				}
				break;
			case 132:
				{
				alt25 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 25, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:4: STRING
				{
				DebugLocation(140, 4);
				STRING53=(IToken)Match(input,STRING,Follow._STRING_in_from_clause_item685);  
				stream_STRING.Add(STRING53);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 140:11: -> ^( T_FILE STRING )
				{
					DebugLocation(140, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:140:14: ^( T_FILE STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(140, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(140, 23);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:141:4: file
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(141, 4);
				PushFollow(Follow._file_in_from_clause_item698);
				file54=file();
				PopFollow();

				adaptor.AddChild(root_0, file54.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:142:4: subquery
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(142, 4);
				PushFollow(Follow._subquery_in_from_clause_item703);
				subquery55=subquery();
				PopFollow();

				adaptor.AddChild(root_0, subquery55.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("from_clause_item", 11);
			LeaveRule("from_clause_item", 11);
			LeaveRule_from_clause_item();
	    }
	 	DebugLocation(143, 1);
		} finally { DebugExitRule(GrammarFileName, "from_clause_item"); }
		return retval;

	}
	// $ANTLR end "from_clause_item"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file() {}

	// $ANTLR start "file"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:145:1: file : ( '[' ( WS )? ( file_string | subquery ) ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_string ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE ^( T_STRING SIMPLE_FILE ) ) );
	[GrammarRule("file")]
	private AstParserRuleReturnScope<object, IToken> file()
	{
		EnterRule_file();
		EnterRule("file", 12);
		TraceIn("file", 12);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal56 = default(IToken);
	    IToken WS57 = default(IToken);
	    IToken WS60 = default(IToken);
	    IToken WS62 = default(IToken);
	    IToken char_literal63 = default(IToken);
	    IToken SIMPLE_FILE64 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_string58 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> subquery59 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option61 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal56_tree = default(object);
	    object WS57_tree = default(object);
	    object WS60_tree = default(object);
	    object WS62_tree = default(object);
	    object char_literal63_tree = default(object);
	    object SIMPLE_FILE64_tree = default(object);
	    RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
	    RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleSubtreeStream stream_file_option=new RewriteRuleSubtreeStream(adaptor,"rule file_option");
	    RewriteRuleSubtreeStream stream_file_string=new RewriteRuleSubtreeStream(adaptor,"rule file_string");
	    RewriteRuleSubtreeStream stream_subquery=new RewriteRuleSubtreeStream(adaptor,"rule subquery");
		try { DebugEnterRule(GrammarFileName, "file");
		DebugLocation(145, 51);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:2: ( '[' ( WS )? ( file_string | subquery ) ( WS file_option )* ( WS )? ']' -> ^( T_FILE file_string ( file_option )* ) | SIMPLE_FILE -> ^( T_FILE ^( T_STRING SIMPLE_FILE ) ) )
			int alt30=2;
			try { DebugEnterDecision(30, decisionCanBacktrack[30]);
			int LA30_0 = input.LA(1);

			if ((LA30_0==146))
			{
				alt30 = 1;
			}
			else if ((LA30_0==SIMPLE_FILE))
			{
				alt30 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 30, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(30); }
			switch (alt30)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:4: '[' ( WS )? ( file_string | subquery ) ( WS file_option )* ( WS )? ']'
				{
				DebugLocation(146, 4);
				char_literal56=(IToken)Match(input,146,Follow._146_in_file715);  
				stream_146.Add(char_literal56);

				DebugLocation(146, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:8: ( WS )?
				int alt26=2;
				try { DebugEnterSubRule(26);
				try { DebugEnterDecision(26, decisionCanBacktrack[26]);
				int LA26_0 = input.LA(1);

				if ((LA26_0==WS))
				{
					alt26 = 1;
				}
				} finally { DebugExitDecision(26); }
				switch (alt26)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:8: WS
					{
					DebugLocation(146, 8);
					WS57=(IToken)Match(input,WS,Follow._WS_in_file717);  
					stream_WS.Add(WS57);


					}
					break;

				}
				} finally { DebugExitSubRule(26); }

				DebugLocation(146, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:12: ( file_string | subquery )
				int alt27=2;
				try { DebugEnterSubRule(27);
				try { DebugEnterDecision(27, decisionCanBacktrack[27]);
				int LA27_0 = input.LA(1);

				if ((LA27_0==STRING))
				{
					alt27 = 1;
				}
				else if ((LA27_0==132))
				{
					alt27 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:13: file_string
					{
					DebugLocation(146, 13);
					PushFollow(Follow._file_string_in_file721);
					file_string58=file_string();
					PopFollow();

					stream_file_string.Add(file_string58.Tree);

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:27: subquery
					{
					DebugLocation(146, 27);
					PushFollow(Follow._subquery_in_file725);
					subquery59=subquery();
					PopFollow();

					stream_subquery.Add(subquery59.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(27); }

				DebugLocation(146, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:37: ( WS file_option )*
				try { DebugEnterSubRule(28);
				while (true)
				{
					int alt28=2;
					try { DebugEnterDecision(28, decisionCanBacktrack[28]);
					int LA28_0 = input.LA(1);

					if ((LA28_0==WS))
					{
						int LA28_1 = input.LA(2);

						if ((LA28_1==137))
						{
							alt28 = 1;
						}


					}


					} finally { DebugExitDecision(28); }
					switch ( alt28 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:38: WS file_option
						{
						DebugLocation(146, 38);
						WS60=(IToken)Match(input,WS,Follow._WS_in_file729);  
						stream_WS.Add(WS60);

						DebugLocation(146, 41);
						PushFollow(Follow._file_option_in_file731);
						file_option61=file_option();
						PopFollow();

						stream_file_option.Add(file_option61.Tree);

						}
						break;

					default:
						goto loop28;
					}
				}

				loop28:
					;

				} finally { DebugExitSubRule(28); }

				DebugLocation(146, 55);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:55: ( WS )?
				int alt29=2;
				try { DebugEnterSubRule(29);
				try { DebugEnterDecision(29, decisionCanBacktrack[29]);
				int LA29_0 = input.LA(1);

				if ((LA29_0==WS))
				{
					alt29 = 1;
				}
				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:55: WS
					{
					DebugLocation(146, 55);
					WS62=(IToken)Match(input,WS,Follow._WS_in_file735);  
					stream_WS.Add(WS62);


					}
					break;

				}
				} finally { DebugExitSubRule(29); }

				DebugLocation(146, 59);
				char_literal63=(IToken)Match(input,147,Follow._147_in_file738);  
				stream_147.Add(char_literal63);



				{
				// AST REWRITE
				// elements: file_option, file_string
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 146:63: -> ^( T_FILE file_string ( file_option )* )
				{
					DebugLocation(146, 66);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:66: ^( T_FILE file_string ( file_option )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(146, 68);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(146, 75);
					adaptor.AddChild(root_1, stream_file_string.NextTree());
					DebugLocation(146, 87);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:146:87: ( file_option )*
					while ( stream_file_option.HasNext )
					{
						DebugLocation(146, 87);
						adaptor.AddChild(root_1, stream_file_option.NextTree());

					}
					stream_file_option.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:4: SIMPLE_FILE
				{
				DebugLocation(148, 4);
				SIMPLE_FILE64=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_file757);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE64);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 148:16: -> ^( T_FILE ^( T_STRING SIMPLE_FILE ) )
				{
					DebugLocation(148, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:19: ^( T_FILE ^( T_STRING SIMPLE_FILE ) )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(148, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILE, "T_FILE"), root_1);

					DebugLocation(148, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:148:28: ^( T_STRING SIMPLE_FILE )
					{
					object root_2 = (object)adaptor.Nil();
					DebugLocation(148, 30);
					root_2 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_2);

					DebugLocation(148, 39);
					adaptor.AddChild(root_2, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file", 12);
			LeaveRule("file", 12);
			LeaveRule_file();
	    }
	 	DebugLocation(148, 51);
		} finally { DebugExitRule(GrammarFileName, "file"); }
		return retval;

	}
	// $ANTLR end "file"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_string() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_string() {}

	// $ANTLR start "file_string"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:150:1: file_string : STRING -> ^( T_STRING STRING ) ;
	[GrammarRule("file_string")]
	private AstParserRuleReturnScope<object, IToken> file_string()
	{
		EnterRule_file_string();
		EnterRule("file_string", 13);
		TraceIn("file_string", 13);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken STRING65 = default(IToken);

	    object STRING65_tree = default(object);
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");

		try { DebugEnterRule(GrammarFileName, "file_string");
		DebugLocation(150, 31);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:2: ( STRING -> ^( T_STRING STRING ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:4: STRING
			{
			DebugLocation(151, 4);
			STRING65=(IToken)Match(input,STRING,Follow._STRING_in_file_string779);  
			stream_STRING.Add(STRING65);



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 151:11: -> ^( T_STRING STRING )
			{
				DebugLocation(151, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:151:14: ^( T_STRING STRING )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(151, 16);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

				DebugLocation(151, 25);
				adaptor.AddChild(root_1, stream_STRING.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_string", 13);
			LeaveRule("file_string", 13);
			LeaveRule_file_string();
	    }
	 	DebugLocation(151, 31);
		} finally { DebugExitRule(GrammarFileName, "file_string"); }
		return retval;

	}
	// $ANTLR end "file_string"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_subquery() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_subquery() {}

	// $ANTLR start "subquery"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:154:1: subquery : '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) ;
	[GrammarRule("subquery")]
	private AstParserRuleReturnScope<object, IToken> subquery()
	{
		EnterRule_subquery();
		EnterRule("subquery", 14);
		TraceIn("subquery", 14);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal66 = default(IToken);
	    IToken WS67 = default(IToken);
	    IToken WS69 = default(IToken);
	    IToken char_literal70 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> select_command68 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal66_tree = default(object);
	    object WS67_tree = default(object);
	    object WS69_tree = default(object);
	    object char_literal70_tree = default(object);
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "subquery");
		DebugLocation(154, 65);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:2: ( '(' ( WS )? select_command ( WS )? ')' -> ^( T_SUBQUERY select_command ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:4: '(' ( WS )? select_command ( WS )? ')'
			{
			DebugLocation(155, 4);
			char_literal66=(IToken)Match(input,132,Follow._132_in_subquery799);  
			stream_132.Add(char_literal66);

			DebugLocation(155, 8);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:8: ( WS )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, decisionCanBacktrack[31]);
			int LA31_0 = input.LA(1);

			if ((LA31_0==WS))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:8: WS
				{
				DebugLocation(155, 8);
				WS67=(IToken)Match(input,WS,Follow._WS_in_subquery801);  
				stream_WS.Add(WS67);


				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(155, 12);
			PushFollow(Follow._select_command_in_subquery804);
			select_command68=select_command();
			PopFollow();

			stream_select_command.Add(select_command68.Tree);
			DebugLocation(155, 27);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:27: ( WS )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, decisionCanBacktrack[32]);
			int LA32_0 = input.LA(1);

			if ((LA32_0==WS))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:27: WS
				{
				DebugLocation(155, 27);
				WS69=(IToken)Match(input,WS,Follow._WS_in_subquery806);  
				stream_WS.Add(WS69);


				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(155, 31);
			char_literal70=(IToken)Match(input,133,Follow._133_in_subquery809);  
			stream_133.Add(char_literal70);



			{
			// AST REWRITE
			// elements: select_command
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 155:35: -> ^( T_SUBQUERY select_command )
			{
				DebugLocation(155, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:155:38: ^( T_SUBQUERY select_command )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(155, 40);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SUBQUERY, "T_SUBQUERY"), root_1);

				DebugLocation(155, 51);
				adaptor.AddChild(root_1, stream_select_command.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("subquery", 14);
			LeaveRule("subquery", 14);
			LeaveRule_subquery();
	    }
	 	DebugLocation(155, 65);
		} finally { DebugExitRule(GrammarFileName, "subquery"); }
		return retval;

	}
	// $ANTLR end "subquery"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option() {}

	// $ANTLR start "file_option"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:157:1: file_option : '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) ;
	[GrammarRule("file_option")]
	private AstParserRuleReturnScope<object, IToken> file_option()
	{
		EnterRule_file_option();
		EnterRule("file_option", 15);
		TraceIn("file_option", 15);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal71 = default(IToken);
	    IToken WS73 = default(IToken);
	    IToken char_literal74 = default(IToken);
	    IToken WS75 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file_option_name72 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> file_option_value76 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal71_tree = default(object);
	    object WS73_tree = default(object);
	    object char_literal74_tree = default(object);
	    object WS75_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
	    RewriteRuleSubtreeStream stream_file_option_name=new RewriteRuleSubtreeStream(adaptor,"rule file_option_name");
	    RewriteRuleSubtreeStream stream_file_option_value=new RewriteRuleSubtreeStream(adaptor,"rule file_option_value");
		try { DebugEnterRule(GrammarFileName, "file_option");
		DebugLocation(157, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:2: ( '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )? -> ^( T_FILEOPTION file_option_name ( file_option_value )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:4: '-' file_option_name ( ( WS )? '=' ( WS )? file_option_value )?
			{
			DebugLocation(158, 4);
			char_literal71=(IToken)Match(input,137,Follow._137_in_file_option827);  
			stream_137.Add(char_literal71);

			DebugLocation(158, 8);
			PushFollow(Follow._file_option_name_in_file_option829);
			file_option_name72=file_option_name();
			PopFollow();

			stream_file_option_name.Add(file_option_name72.Tree);
			DebugLocation(158, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:25: ( ( WS )? '=' ( WS )? file_option_value )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, decisionCanBacktrack[35]);
			int LA35_0 = input.LA(1);

			if ((LA35_0==WS))
			{
				int LA35_1 = input.LA(2);

				if ((LA35_1==143))
				{
					alt35 = 1;
				}
			}
			else if ((LA35_0==143))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:27: ( WS )? '=' ( WS )? file_option_value
				{
				DebugLocation(158, 27);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:27: ( WS )?
				int alt33=2;
				try { DebugEnterSubRule(33);
				try { DebugEnterDecision(33, decisionCanBacktrack[33]);
				int LA33_0 = input.LA(1);

				if ((LA33_0==WS))
				{
					alt33 = 1;
				}
				} finally { DebugExitDecision(33); }
				switch (alt33)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:27: WS
					{
					DebugLocation(158, 27);
					WS73=(IToken)Match(input,WS,Follow._WS_in_file_option833);  
					stream_WS.Add(WS73);


					}
					break;

				}
				} finally { DebugExitSubRule(33); }

				DebugLocation(158, 31);
				char_literal74=(IToken)Match(input,143,Follow._143_in_file_option836);  
				stream_143.Add(char_literal74);

				DebugLocation(158, 35);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:35: ( WS )?
				int alt34=2;
				try { DebugEnterSubRule(34);
				try { DebugEnterDecision(34, decisionCanBacktrack[34]);
				int LA34_0 = input.LA(1);

				if ((LA34_0==WS))
				{
					alt34 = 1;
				}
				} finally { DebugExitDecision(34); }
				switch (alt34)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:35: WS
					{
					DebugLocation(158, 35);
					WS75=(IToken)Match(input,WS,Follow._WS_in_file_option838);  
					stream_WS.Add(WS75);


					}
					break;

				}
				} finally { DebugExitSubRule(34); }

				DebugLocation(158, 39);
				PushFollow(Follow._file_option_value_in_file_option841);
				file_option_value76=file_option_value();
				PopFollow();

				stream_file_option_value.Add(file_option_value76.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: file_option_name, file_option_value
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 158:59: -> ^( T_FILEOPTION file_option_name ( file_option_value )? )
			{
				DebugLocation(158, 62);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:62: ^( T_FILEOPTION file_option_name ( file_option_value )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(158, 64);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FILEOPTION, "T_FILEOPTION"), root_1);

				DebugLocation(158, 77);
				adaptor.AddChild(root_1, stream_file_option_name.NextTree());
				DebugLocation(158, 94);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:158:94: ( file_option_value )?
				if (stream_file_option_value.HasNext)
				{
					DebugLocation(158, 94);
					adaptor.AddChild(root_1, stream_file_option_value.NextTree());

				}
				stream_file_option_value.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option", 15);
			LeaveRule("file_option", 15);
			LeaveRule_file_option();
	    }
	 	DebugLocation(159, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option"); }
		return retval;

	}
	// $ANTLR end "file_option"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_name() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_name() {}

	// $ANTLR start "file_option_name"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:161:1: file_option_name : TOKEN ;
	[GrammarRule("file_option_name")]
	private AstParserRuleReturnScope<object, IToken> file_option_name()
	{
		EnterRule_file_option_name();
		EnterRule("file_option_name", 16);
		TraceIn("file_option_name", 16);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN77 = default(IToken);

	    object TOKEN77_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_name");
		DebugLocation(161, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:2: ( TOKEN )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:162:4: TOKEN
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(162, 4);
			TOKEN77=(IToken)Match(input,TOKEN,Follow._TOKEN_in_file_option_name865); 
			TOKEN77_tree = (object)adaptor.Create(TOKEN77);
			adaptor.AddChild(root_0, TOKEN77_tree);


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_name", 16);
			LeaveRule("file_option_name", 16);
			LeaveRule_file_option_name();
	    }
	 	DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_name"); }
		return retval;

	}
	// $ANTLR end "file_option_name"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_file_option_value() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_file_option_value() {}

	// $ANTLR start "file_option_value"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:165:1: file_option_value : ( TOKEN | STRING | NUMBER );
	[GrammarRule("file_option_value")]
	private AstParserRuleReturnScope<object, IToken> file_option_value()
	{
		EnterRule_file_option_value();
		EnterRule("file_option_value", 17);
		TraceIn("file_option_value", 17);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken set78 = default(IToken);

	    object set78_tree = default(object);

		try { DebugEnterRule(GrammarFileName, "file_option_value");
		DebugLocation(165, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:166:2: ( TOKEN | STRING | NUMBER )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(166, 2);

			set78=(IToken)input.LT(1);
			if (input.LA(1)==NUMBER||input.LA(1)==STRING||input.LA(1)==TOKEN)
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set78));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("file_option_value", 17);
			LeaveRule("file_option_value", 17);
			LeaveRule_file_option_value();
	    }
	 	DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "file_option_value"); }
		return retval;

	}
	// $ANTLR end "file_option_value"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_where_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_where_clause() {}

	// $ANTLR start "where_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:169:1: where_clause : WHERE WS expression -> ^( T_WHERE expression ) ;
	[GrammarRule("where_clause")]
	private AstParserRuleReturnScope<object, IToken> where_clause()
	{
		EnterRule_where_clause();
		EnterRule("where_clause", 18);
		TraceIn("where_clause", 18);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHERE79 = default(IToken);
	    IToken WS80 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression81 = default(AstParserRuleReturnScope<object, IToken>);

	    object WHERE79_tree = default(object);
	    object WS80_tree = default(object);
	    RewriteRuleITokenStream stream_WHERE=new RewriteRuleITokenStream(adaptor,"token WHERE");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "where_clause");
		DebugLocation(169, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:2: ( WHERE WS expression -> ^( T_WHERE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:170:4: WHERE WS expression
			{
			DebugLocation(170, 4);
			WHERE79=(IToken)Match(input,WHERE,Follow._WHERE_in_where_clause897);  
			stream_WHERE.Add(WHERE79);

			DebugLocation(170, 10);
			WS80=(IToken)Match(input,WS,Follow._WS_in_where_clause899);  
			stream_WS.Add(WS80);

			DebugLocation(170, 13);
			PushFollow(Follow._expression_in_where_clause901);
			expression81=expression();
			PopFollow();

			stream_expression.Add(expression81.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 171:2: -> ^( T_WHERE expression )
			{
				DebugLocation(171, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:171:5: ^( T_WHERE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(171, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_WHERE, "T_WHERE"), root_1);

				DebugLocation(171, 15);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("where_clause", 18);
			LeaveRule("where_clause", 18);
			LeaveRule_where_clause();
	    }
	 	DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "where_clause"); }
		return retval;

	}
	// $ANTLR end "where_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_groupby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_groupby_clause() {}

	// $ANTLR start "groupby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:173:1: groupby_clause : GROUP WS BY WS expression_list -> ^( T_GROUPBY expression_list ) ;
	[GrammarRule("groupby_clause")]
	private AstParserRuleReturnScope<object, IToken> groupby_clause()
	{
		EnterRule_groupby_clause();
		EnterRule("groupby_clause", 19);
		TraceIn("groupby_clause", 19);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken GROUP82 = default(IToken);
	    IToken WS83 = default(IToken);
	    IToken BY84 = default(IToken);
	    IToken WS85 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression_list86 = default(AstParserRuleReturnScope<object, IToken>);

	    object GROUP82_tree = default(object);
	    object WS83_tree = default(object);
	    object BY84_tree = default(object);
	    object WS85_tree = default(object);
	    RewriteRuleITokenStream stream_GROUP=new RewriteRuleITokenStream(adaptor,"token GROUP");
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_list=new RewriteRuleSubtreeStream(adaptor,"rule expression_list");
		try { DebugEnterRule(GrammarFileName, "groupby_clause");
		DebugLocation(173, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:174:2: ( GROUP WS BY WS expression_list -> ^( T_GROUPBY expression_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:174:4: GROUP WS BY WS expression_list
			{
			DebugLocation(174, 4);
			GROUP82=(IToken)Match(input,GROUP,Follow._GROUP_in_groupby_clause920);  
			stream_GROUP.Add(GROUP82);

			DebugLocation(174, 10);
			WS83=(IToken)Match(input,WS,Follow._WS_in_groupby_clause922);  
			stream_WS.Add(WS83);

			DebugLocation(174, 13);
			BY84=(IToken)Match(input,BY,Follow._BY_in_groupby_clause924);  
			stream_BY.Add(BY84);

			DebugLocation(174, 16);
			WS85=(IToken)Match(input,WS,Follow._WS_in_groupby_clause926);  
			stream_WS.Add(WS85);

			DebugLocation(174, 19);
			PushFollow(Follow._expression_list_in_groupby_clause928);
			expression_list86=expression_list();
			PopFollow();

			stream_expression_list.Add(expression_list86.Tree);


			{
			// AST REWRITE
			// elements: expression_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 175:2: -> ^( T_GROUPBY expression_list )
			{
				DebugLocation(175, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:175:5: ^( T_GROUPBY expression_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(175, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_GROUPBY, "T_GROUPBY"), root_1);

				DebugLocation(175, 17);
				adaptor.AddChild(root_1, stream_expression_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("groupby_clause", 19);
			LeaveRule("groupby_clause", 19);
			LeaveRule_groupby_clause();
	    }
	 	DebugLocation(176, 1);
		} finally { DebugExitRule(GrammarFileName, "groupby_clause"); }
		return retval;

	}
	// $ANTLR end "groupby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_clause() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_clause() {}

	// $ANTLR start "orderby_clause"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:178:1: orderby_clause : ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) ;
	[GrammarRule("orderby_clause")]
	private AstParserRuleReturnScope<object, IToken> orderby_clause()
	{
		EnterRule_orderby_clause();
		EnterRule("orderby_clause", 20);
		TraceIn("orderby_clause", 20);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ORDER87 = default(IToken);
	    IToken WS88 = default(IToken);
	    IToken BY89 = default(IToken);
	    IToken WS90 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column_list91 = default(AstParserRuleReturnScope<object, IToken>);

	    object ORDER87_tree = default(object);
	    object WS88_tree = default(object);
	    object BY89_tree = default(object);
	    object WS90_tree = default(object);
	    RewriteRuleITokenStream stream_BY=new RewriteRuleITokenStream(adaptor,"token BY");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ORDER=new RewriteRuleITokenStream(adaptor,"token ORDER");
	    RewriteRuleSubtreeStream stream_orderby_column_list=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column_list");
		try { DebugEnterRule(GrammarFileName, "orderby_clause");
		DebugLocation(178, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:2: ( ORDER WS BY WS orderby_column_list -> ^( T_ORDERBY orderby_column_list ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:179:4: ORDER WS BY WS orderby_column_list
			{
			DebugLocation(179, 4);
			ORDER87=(IToken)Match(input,ORDER,Follow._ORDER_in_orderby_clause949);  
			stream_ORDER.Add(ORDER87);

			DebugLocation(179, 10);
			WS88=(IToken)Match(input,WS,Follow._WS_in_orderby_clause951);  
			stream_WS.Add(WS88);

			DebugLocation(179, 13);
			BY89=(IToken)Match(input,BY,Follow._BY_in_orderby_clause953);  
			stream_BY.Add(BY89);

			DebugLocation(179, 16);
			WS90=(IToken)Match(input,WS,Follow._WS_in_orderby_clause955);  
			stream_WS.Add(WS90);

			DebugLocation(179, 19);
			PushFollow(Follow._orderby_column_list_in_orderby_clause957);
			orderby_column_list91=orderby_column_list();
			PopFollow();

			stream_orderby_column_list.Add(orderby_column_list91.Tree);


			{
			// AST REWRITE
			// elements: orderby_column_list
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 180:2: -> ^( T_ORDERBY orderby_column_list )
			{
				DebugLocation(180, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:180:5: ^( T_ORDERBY orderby_column_list )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(180, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY, "T_ORDERBY"), root_1);

				DebugLocation(180, 17);
				adaptor.AddChild(root_1, stream_orderby_column_list.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_clause", 20);
			LeaveRule("orderby_clause", 20);
			LeaveRule_orderby_clause();
	    }
	 	DebugLocation(181, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_clause"); }
		return retval;

	}
	// $ANTLR end "orderby_clause"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column_list() {}

	// $ANTLR start "orderby_column_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:183:1: orderby_column_list : orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* ;
	[GrammarRule("orderby_column_list")]
	private AstParserRuleReturnScope<object, IToken> orderby_column_list()
	{
		EnterRule_orderby_column_list();
		EnterRule("orderby_column_list", 21);
		TraceIn("orderby_column_list", 21);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS93 = default(IToken);
	    IToken char_literal94 = default(IToken);
	    IToken WS95 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> orderby_column92 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_column96 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS93_tree = default(object);
	    object char_literal94_tree = default(object);
	    object WS95_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleSubtreeStream stream_orderby_column=new RewriteRuleSubtreeStream(adaptor,"rule orderby_column");
		try { DebugEnterRule(GrammarFileName, "orderby_column_list");
		DebugLocation(183, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:2: ( orderby_column ( ( WS )? ',' ( WS )? orderby_column )* -> ( orderby_column )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:4: orderby_column ( ( WS )? ',' ( WS )? orderby_column )*
			{
			DebugLocation(184, 4);
			PushFollow(Follow._orderby_column_in_orderby_column_list978);
			orderby_column92=orderby_column();
			PopFollow();

			stream_orderby_column.Add(orderby_column92.Tree);
			DebugLocation(184, 19);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:19: ( ( WS )? ',' ( WS )? orderby_column )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, decisionCanBacktrack[38]);
				int LA38_0 = input.LA(1);

				if ((LA38_0==WS))
				{
					int LA38_1 = input.LA(2);

					if ((LA38_1==136))
					{
						alt38 = 1;
					}


				}
				else if ((LA38_0==136))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:20: ( WS )? ',' ( WS )? orderby_column
					{
					DebugLocation(184, 20);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:20: ( WS )?
					int alt36=2;
					try { DebugEnterSubRule(36);
					try { DebugEnterDecision(36, decisionCanBacktrack[36]);
					int LA36_0 = input.LA(1);

					if ((LA36_0==WS))
					{
						alt36 = 1;
					}
					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:20: WS
						{
						DebugLocation(184, 20);
						WS93=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list981);  
						stream_WS.Add(WS93);


						}
						break;

					}
					} finally { DebugExitSubRule(36); }

					DebugLocation(184, 24);
					char_literal94=(IToken)Match(input,136,Follow._136_in_orderby_column_list984);  
					stream_136.Add(char_literal94);

					DebugLocation(184, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:28: ( WS )?
					int alt37=2;
					try { DebugEnterSubRule(37);
					try { DebugEnterDecision(37, decisionCanBacktrack[37]);
					int LA37_0 = input.LA(1);

					if ((LA37_0==WS))
					{
						alt37 = 1;
					}
					} finally { DebugExitDecision(37); }
					switch (alt37)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:184:28: WS
						{
						DebugLocation(184, 28);
						WS95=(IToken)Match(input,WS,Follow._WS_in_orderby_column_list986);  
						stream_WS.Add(WS95);


						}
						break;

					}
					} finally { DebugExitSubRule(37); }

					DebugLocation(184, 32);
					PushFollow(Follow._orderby_column_in_orderby_column_list989);
					orderby_column96=orderby_column();
					PopFollow();

					stream_orderby_column.Add(orderby_column96.Tree);

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: orderby_column
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 185:2: -> ( orderby_column )*
			{
				DebugLocation(185, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:185:5: ( orderby_column )*
				while ( stream_orderby_column.HasNext )
				{
					DebugLocation(185, 5);
					adaptor.AddChild(root_0, stream_orderby_column.NextTree());

				}
				stream_orderby_column.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column_list", 21);
			LeaveRule("orderby_column_list", 21);
			LeaveRule_orderby_column_list();
	    }
	 	DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column_list"); }
		return retval;

	}
	// $ANTLR end "orderby_column_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_column() {}

	// $ANTLR start "orderby_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:188:1: orderby_column : expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) ;
	[GrammarRule("orderby_column")]
	private AstParserRuleReturnScope<object, IToken> orderby_column()
	{
		EnterRule_orderby_column();
		EnterRule("orderby_column", 22);
		TraceIn("orderby_column", 22);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS98 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression97 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> orderby_direction99 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS98_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_orderby_direction=new RewriteRuleSubtreeStream(adaptor,"rule orderby_direction");
		try { DebugEnterRule(GrammarFileName, "orderby_column");
		DebugLocation(188, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:2: ( expression ( WS orderby_direction )? -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:4: expression ( WS orderby_direction )?
			{
			DebugLocation(189, 4);
			PushFollow(Follow._expression_in_orderby_column1009);
			expression97=expression();
			PopFollow();

			stream_expression.Add(expression97.Tree);
			DebugLocation(189, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:15: ( WS orderby_direction )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, decisionCanBacktrack[39]);
			int LA39_0 = input.LA(1);

			if ((LA39_0==WS))
			{
				int LA39_1 = input.LA(2);

				if ((LA39_1==ASC||LA39_1==DESC))
				{
					alt39 = 1;
				}
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:16: WS orderby_direction
				{
				DebugLocation(189, 16);
				WS98=(IToken)Match(input,WS,Follow._WS_in_orderby_column1012);  
				stream_WS.Add(WS98);

				DebugLocation(189, 19);
				PushFollow(Follow._orderby_direction_in_orderby_column1014);
				orderby_direction99=orderby_direction();
				PopFollow();

				stream_orderby_direction.Add(orderby_direction99.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }



			{
			// AST REWRITE
			// elements: orderby_direction, expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 189:39: -> ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
			{
				DebugLocation(189, 42);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:42: ^( T_ORDERBY_COLUMN expression ( orderby_direction )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(189, 44);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_ORDERBY_COLUMN, "T_ORDERBY_COLUMN"), root_1);

				DebugLocation(189, 61);
				adaptor.AddChild(root_1, stream_expression.NextTree());
				DebugLocation(189, 72);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:189:72: ( orderby_direction )?
				if (stream_orderby_direction.HasNext)
				{
					DebugLocation(189, 72);
					adaptor.AddChild(root_1, stream_orderby_direction.NextTree());

				}
				stream_orderby_direction.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_column", 22);
			LeaveRule("orderby_column", 22);
			LeaveRule_orderby_column();
	    }
	 	DebugLocation(190, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_column"); }
		return retval;

	}
	// $ANTLR end "orderby_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_orderby_direction() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_orderby_direction() {}

	// $ANTLR start "orderby_direction"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:192:1: orderby_direction : ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC );
	[GrammarRule("orderby_direction")]
	private AstParserRuleReturnScope<object, IToken> orderby_direction()
	{
		EnterRule_orderby_direction();
		EnterRule("orderby_direction", 23);
		TraceIn("orderby_direction", 23);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ASC100 = default(IToken);
	    IToken DESC101 = default(IToken);

	    object ASC100_tree = default(object);
	    object DESC101_tree = default(object);
	    RewriteRuleITokenStream stream_DESC=new RewriteRuleITokenStream(adaptor,"token DESC");
	    RewriteRuleITokenStream stream_ASC=new RewriteRuleITokenStream(adaptor,"token ASC");

		try { DebugEnterRule(GrammarFileName, "orderby_direction");
		DebugLocation(192, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:2: ( ASC -> T_ORDERBY_ASC | DESC -> T_ORDERBY_DESC )
			int alt40=2;
			try { DebugEnterDecision(40, decisionCanBacktrack[40]);
			int LA40_0 = input.LA(1);

			if ((LA40_0==ASC))
			{
				alt40 = 1;
			}
			else if ((LA40_0==DESC))
			{
				alt40 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 40, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:193:4: ASC
				{
				DebugLocation(193, 4);
				ASC100=(IToken)Match(input,ASC,Follow._ASC_in_orderby_direction1039);  
				stream_ASC.Add(ASC100);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 193:8: -> T_ORDERBY_ASC
				{
					DebugLocation(193, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_ASC, "T_ORDERBY_ASC"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:194:4: DESC
				{
				DebugLocation(194, 4);
				DESC101=(IToken)Match(input,DESC,Follow._DESC_in_orderby_direction1048);  
				stream_DESC.Add(DESC101);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 194:9: -> T_ORDERBY_DESC
				{
					DebugLocation(194, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_ORDERBY_DESC, "T_ORDERBY_DESC"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("orderby_direction", 23);
			LeaveRule("orderby_direction", 23);
			LeaveRule_orderby_direction();
	    }
	 	DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "orderby_direction"); }
		return retval;

	}
	// $ANTLR end "orderby_direction"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_use_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_use_command() {}

	// $ANTLR start "use_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:200:1: use_command : USE WS file -> ^( T_USE file ) ;
	[GrammarRule("use_command")]
	private AstParserRuleReturnScope<object, IToken> use_command()
	{
		EnterRule_use_command();
		EnterRule("use_command", 24);
		TraceIn("use_command", 24);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken USE102 = default(IToken);
	    IToken WS103 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> file104 = default(AstParserRuleReturnScope<object, IToken>);

	    object USE102_tree = default(object);
	    object WS103_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_USE=new RewriteRuleITokenStream(adaptor,"token USE");
	    RewriteRuleSubtreeStream stream_file=new RewriteRuleSubtreeStream(adaptor,"rule file");
		try { DebugEnterRule(GrammarFileName, "use_command");
		DebugLocation(200, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:2: ( USE WS file -> ^( T_USE file ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:4: USE WS file
			{
			DebugLocation(201, 4);
			USE102=(IToken)Match(input,USE,Follow._USE_in_use_command1066);  
			stream_USE.Add(USE102);

			DebugLocation(201, 8);
			WS103=(IToken)Match(input,WS,Follow._WS_in_use_command1068);  
			stream_WS.Add(WS103);

			DebugLocation(201, 11);
			PushFollow(Follow._file_in_use_command1070);
			file104=file();
			PopFollow();

			stream_file.Add(file104.Tree);


			{
			// AST REWRITE
			// elements: file
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 201:16: -> ^( T_USE file )
			{
				DebugLocation(201, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:201:19: ^( T_USE file )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(201, 21);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_USE, "T_USE"), root_1);

				DebugLocation(201, 27);
				adaptor.AddChild(root_1, stream_file.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("use_command", 24);
			LeaveRule("use_command", 24);
			LeaveRule_use_command();
	    }
	 	DebugLocation(202, 1);
		} finally { DebugExitRule(GrammarFileName, "use_command"); }
		return retval;

	}
	// $ANTLR end "use_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list() {}

	// $ANTLR start "expression_list"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:207:1: expression_list : expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) ;
	[GrammarRule("expression_list")]
	private AstParserRuleReturnScope<object, IToken> expression_list()
	{
		EnterRule_expression_list();
		EnterRule("expression_list", 25);
		TraceIn("expression_list", 25);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS106 = default(IToken);
	    IToken char_literal107 = default(IToken);
	    IToken WS108 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression105 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression109 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS106_tree = default(object);
	    object char_literal107_tree = default(object);
	    object WS108_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "expression_list");
		DebugLocation(207, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:2: ( expression ( ( WS )? ',' ( WS )? expression )* -> ^( T_EXPRESSIONLIST ( expression )+ ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:4: expression ( ( WS )? ',' ( WS )? expression )*
			{
			DebugLocation(208, 4);
			PushFollow(Follow._expression_in_expression_list1092);
			expression105=expression();
			PopFollow();

			stream_expression.Add(expression105.Tree);
			DebugLocation(208, 15);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:15: ( ( WS )? ',' ( WS )? expression )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, decisionCanBacktrack[43]);
				int LA43_0 = input.LA(1);

				if ((LA43_0==WS))
				{
					int LA43_1 = input.LA(2);

					if ((LA43_1==136))
					{
						alt43 = 1;
					}


				}
				else if ((LA43_0==136))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:16: ( WS )? ',' ( WS )? expression
					{
					DebugLocation(208, 16);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:16: ( WS )?
					int alt41=2;
					try { DebugEnterSubRule(41);
					try { DebugEnterDecision(41, decisionCanBacktrack[41]);
					int LA41_0 = input.LA(1);

					if ((LA41_0==WS))
					{
						alt41 = 1;
					}
					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:16: WS
						{
						DebugLocation(208, 16);
						WS106=(IToken)Match(input,WS,Follow._WS_in_expression_list1095);  
						stream_WS.Add(WS106);


						}
						break;

					}
					} finally { DebugExitSubRule(41); }

					DebugLocation(208, 20);
					char_literal107=(IToken)Match(input,136,Follow._136_in_expression_list1098);  
					stream_136.Add(char_literal107);

					DebugLocation(208, 24);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:24: ( WS )?
					int alt42=2;
					try { DebugEnterSubRule(42);
					try { DebugEnterDecision(42, decisionCanBacktrack[42]);
					int LA42_0 = input.LA(1);

					if ((LA42_0==WS))
					{
						alt42 = 1;
					}
					} finally { DebugExitDecision(42); }
					switch (alt42)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:24: WS
						{
						DebugLocation(208, 24);
						WS108=(IToken)Match(input,WS,Follow._WS_in_expression_list1100);  
						stream_WS.Add(WS108);


						}
						break;

					}
					} finally { DebugExitSubRule(42); }

					DebugLocation(208, 28);
					PushFollow(Follow._expression_in_expression_list1103);
					expression109=expression();
					PopFollow();

					stream_expression.Add(expression109.Tree);

					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }



			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 208:41: -> ^( T_EXPRESSIONLIST ( expression )+ )
			{
				DebugLocation(208, 44);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:208:44: ^( T_EXPRESSIONLIST ( expression )+ )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(208, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXPRESSIONLIST, "T_EXPRESSIONLIST"), root_1);

				DebugLocation(208, 63);
				if (!(stream_expression.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_expression.HasNext )
				{
					DebugLocation(208, 63);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list", 25);
			LeaveRule("expression_list", 25);
			LeaveRule_expression_list();
	    }
	 	DebugLocation(209, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list"); }
		return retval;

	}
	// $ANTLR end "expression_list"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_list_or_select_command() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_list_or_select_command() {}

	// $ANTLR start "expression_list_or_select_command"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:211:1: expression_list_or_select_command : ( expression_list | select_command );
	[GrammarRule("expression_list_or_select_command")]
	private AstParserRuleReturnScope<object, IToken> expression_list_or_select_command()
	{
		EnterRule_expression_list_or_select_command();
		EnterRule("expression_list_or_select_command", 26);
		TraceIn("expression_list_or_select_command", 26);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_list110 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command111 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression_list_or_select_command");
		DebugLocation(211, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:2: ( expression_list | select_command )
			int alt44=2;
			try { DebugEnterDecision(44, decisionCanBacktrack[44]);
			int LA44_0 = input.LA(1);

			if (((LA44_0>=CASE && LA44_0<=CAST)||LA44_0==CONVERT||LA44_0==EXISTS||(LA44_0>=NOT && LA44_0<=NUMBER)||LA44_0==SIMPLE_FILE||(LA44_0>=STRING && LA44_0<=SYSTEMVAR)||LA44_0==TOKEN||LA44_0==132))
			{
				alt44 = 1;
			}
			else if ((LA44_0==SELECT))
			{
				alt44 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 44, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:4: expression_list
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(212, 4);
				PushFollow(Follow._expression_list_in_expression_list_or_select_command1126);
				expression_list110=expression_list();
				PopFollow();

				adaptor.AddChild(root_0, expression_list110.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:212:22: select_command
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(212, 22);
				PushFollow(Follow._select_command_in_expression_list_or_select_command1130);
				select_command111=select_command();
				PopFollow();

				adaptor.AddChild(root_0, select_command111.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_list_or_select_command", 26);
			LeaveRule("expression_list_or_select_command", 26);
			LeaveRule_expression_list_or_select_command();
	    }
	 	DebugLocation(213, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_list_or_select_command"); }
		return retval;

	}
	// $ANTLR end "expression_list_or_select_command"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression() {}

	// $ANTLR start "expression"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:215:1: expression : expression_7 ;
	[GrammarRule("expression")]
	private AstParserRuleReturnScope<object, IToken> expression()
	{
		EnterRule_expression();
		EnterRule("expression", 27);
		TraceIn("expression", 27);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    AstParserRuleReturnScope<object, IToken> expression_7112 = default(AstParserRuleReturnScope<object, IToken>);


		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(215, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:2: ( expression_7 )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:216:4: expression_7
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(216, 4);
			PushFollow(Follow._expression_7_in_expression1142);
			expression_7112=expression_7();
			PopFollow();

			adaptor.AddChild(root_0, expression_7112.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression", 27);
			LeaveRule("expression", 27);
			LeaveRule_expression();
	    }
	 	DebugLocation(217, 1);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return retval;

	}
	// $ANTLR end "expression"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_7() {}

	// $ANTLR start "expression_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:219:1: expression_7 : (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* ;
	[GrammarRule("expression_7")]
	private AstParserRuleReturnScope<object, IToken> expression_7()
	{
		EnterRule_expression_7();
		EnterRule("expression_7", 28);
		TraceIn("expression_7", 28);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS113 = default(IToken);
	    IToken WS115 = default(IToken);
	    IToken IN116 = default(IToken);
	    IToken WS117 = default(IToken);
	    IToken char_literal118 = default(IToken);
	    IToken WS119 = default(IToken);
	    IToken WS121 = default(IToken);
	    IToken char_literal122 = default(IToken);
	    IToken NOT123 = default(IToken);
	    IToken WS124 = default(IToken);
	    IToken IN125 = default(IToken);
	    IToken WS126 = default(IToken);
	    IToken char_literal127 = default(IToken);
	    IToken WS128 = default(IToken);
	    IToken WS130 = default(IToken);
	    IToken char_literal131 = default(IToken);
	    IToken WS133 = default(IToken);
	    IToken SOME134 = default(IToken);
	    IToken ANY135 = default(IToken);
	    IToken WS136 = default(IToken);
	    IToken char_literal137 = default(IToken);
	    IToken char_literal139 = default(IToken);
	    IToken WS141 = default(IToken);
	    IToken ALL142 = default(IToken);
	    IToken WS143 = default(IToken);
	    IToken char_literal144 = default(IToken);
	    IToken char_literal146 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_7114 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command120 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command129 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4132 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command138 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4140 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_list_or_select_command145 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS113_tree = default(object);
	    object WS115_tree = default(object);
	    object IN116_tree = default(object);
	    object WS117_tree = default(object);
	    object char_literal118_tree = default(object);
	    object WS119_tree = default(object);
	    object WS121_tree = default(object);
	    object char_literal122_tree = default(object);
	    object NOT123_tree = default(object);
	    object WS124_tree = default(object);
	    object IN125_tree = default(object);
	    object WS126_tree = default(object);
	    object char_literal127_tree = default(object);
	    object WS128_tree = default(object);
	    object WS130_tree = default(object);
	    object char_literal131_tree = default(object);
	    object WS133_tree = default(object);
	    object SOME134_tree = default(object);
	    object ANY135_tree = default(object);
	    object WS136_tree = default(object);
	    object char_literal137_tree = default(object);
	    object char_literal139_tree = default(object);
	    object WS141_tree = default(object);
	    object ALL142_tree = default(object);
	    object WS143_tree = default(object);
	    object char_literal144_tree = default(object);
	    object char_literal146_tree = default(object);
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ANY=new RewriteRuleITokenStream(adaptor,"token ANY");
	    RewriteRuleITokenStream stream_IN=new RewriteRuleITokenStream(adaptor,"token IN");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_SOME=new RewriteRuleITokenStream(adaptor,"token SOME");
	    RewriteRuleITokenStream stream_ALL=new RewriteRuleITokenStream(adaptor,"token ALL");
	    RewriteRuleSubtreeStream stream_op_7=new RewriteRuleSubtreeStream(adaptor,"rule op_7");
	    RewriteRuleSubtreeStream stream_expression_6=new RewriteRuleSubtreeStream(adaptor,"rule expression_6");
	    RewriteRuleSubtreeStream stream_expression_list_or_select_command=new RewriteRuleSubtreeStream(adaptor,"rule expression_list_or_select_command");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_7");
		DebugLocation(219, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:2: ( (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:4: (a= expression_6 -> $a) ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			{
			DebugLocation(220, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:4: (a= expression_6 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:5: a= expression_6
			{
			DebugLocation(220, 6);
			PushFollow(Follow._expression_6_in_expression_71158);
			a=expression_6();
			PopFollow();

			stream_expression_6.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 220:19: -> $a
			{
				DebugLocation(220, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(220, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:25: ( WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) ) )*
			try { DebugEnterSubRule(57);
			while (true)
			{
				int alt57=2;
				try { DebugEnterDecision(57, decisionCanBacktrack[57]);
				int LA57_0 = input.LA(1);

				if ((LA57_0==WS))
				{
					int LA57_1 = input.LA(2);

					if ((LA57_1==NOT))
					{
						int LA57_3 = input.LA(3);

						if ((LA57_3==WS))
						{
							int LA57_5 = input.LA(4);

							if ((LA57_5==BETWEEN||LA57_5==IN||LA57_5==LIKE||LA57_5==MATCH))
							{
								alt57 = 1;
							}


						}


					}
					else if ((LA57_1==BETWEEN||LA57_1==IN||LA57_1==LIKE||LA57_1==MATCH||LA57_1==OR||(LA57_1>=127 && LA57_1<=129)||(LA57_1>=140 && LA57_1<=145)))
					{
						alt57 = 1;
					}


				}


				} finally { DebugExitDecision(57); }
				switch ( alt57 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:26: WS ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					{
					DebugLocation(220, 26);
					WS113=(IToken)Match(input,WS,Follow._WS_in_expression_71165);  
					stream_WS.Add(WS113);

					DebugLocation(220, 29);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:220:29: ( op_7 WS b= expression_6 -> ^( T_OP_BINARY op_7 $expression_7 $b) | IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')' -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command ) | NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')' -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command ) | op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')' -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command ) )
					int alt56=5;
					try { DebugEnterSubRule(56);
					try { DebugEnterDecision(56, decisionCanBacktrack[56]);
					switch (input.LA(1))
					{
					case BETWEEN:
					case LIKE:
					case MATCH:
					case OR:
						{
						alt56 = 1;
						}
						break;
					case NOT:
						{
						int LA56_2 = input.LA(2);

						if ((LA56_2==WS))
						{
							int LA56_13 = input.LA(3);

							if ((LA56_13==BETWEEN||LA56_13==LIKE||LA56_13==MATCH))
							{
								alt56 = 1;
							}
							else if ((LA56_13==IN))
							{
								alt56 = 3;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 13, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 56, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case IN:
						{
						alt56 = 2;
						}
						break;
					case 143:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA56_14 = input.LA(3);

							if ((LA56_14==ANY||LA56_14==SOME))
							{
								alt56 = 4;
							}
							else if ((LA56_14==ALL))
							{
								alt56 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt56 = 4;
							}
							break;
						case ALL:
							{
							alt56 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 4, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 145:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA56_14 = input.LA(3);

							if ((LA56_14==ANY||LA56_14==SOME))
							{
								alt56 = 4;
							}
							else if ((LA56_14==ALL))
							{
								alt56 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt56 = 4;
							}
							break;
						case ALL:
							{
							alt56 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 5, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 141:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA56_14 = input.LA(3);

							if ((LA56_14==ANY||LA56_14==SOME))
							{
								alt56 = 4;
							}
							else if ((LA56_14==ALL))
							{
								alt56 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt56 = 4;
							}
							break;
						case ALL:
							{
							alt56 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 6, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 142:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA56_14 = input.LA(3);

							if ((LA56_14==ANY||LA56_14==SOME))
							{
								alt56 = 4;
							}
							else if ((LA56_14==ALL))
							{
								alt56 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt56 = 4;
							}
							break;
						case ALL:
							{
							alt56 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 7, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 128:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA56_14 = input.LA(3);

							if ((LA56_14==ANY||LA56_14==SOME))
							{
								alt56 = 4;
							}
							else if ((LA56_14==ALL))
							{
								alt56 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt56 = 4;
							}
							break;
						case ALL:
							{
							alt56 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 8, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 129:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA56_14 = input.LA(3);

							if ((LA56_14==ANY||LA56_14==SOME))
							{
								alt56 = 4;
							}
							else if ((LA56_14==ALL))
							{
								alt56 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt56 = 4;
							}
							break;
						case ALL:
							{
							alt56 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 9, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 127:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA56_14 = input.LA(3);

							if ((LA56_14==ANY||LA56_14==SOME))
							{
								alt56 = 4;
							}
							else if ((LA56_14==ALL))
							{
								alt56 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt56 = 4;
							}
							break;
						case ALL:
							{
							alt56 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 10, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 144:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA56_14 = input.LA(3);

							if ((LA56_14==ANY||LA56_14==SOME))
							{
								alt56 = 4;
							}
							else if ((LA56_14==ALL))
							{
								alt56 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt56 = 4;
							}
							break;
						case ALL:
							{
							alt56 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 11, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					case 140:
						{
						switch (input.LA(2))
						{
						case WS:
							{
							int LA56_14 = input.LA(3);

							if ((LA56_14==ANY||LA56_14==SOME))
							{
								alt56 = 4;
							}
							else if ((LA56_14==ALL))
							{
								alt56 = 5;
							}
							else
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 14, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
							}
							break;
						case ANY:
						case SOME:
							{
							alt56 = 4;
							}
							break;
						case ALL:
							{
							alt56 = 5;
							}
							break;
						default:
							{
								NoViableAltException nvae = new NoViableAltException("", 56, 12, input);
								DebugRecognitionException(nvae);
								throw nvae;
							}
						}

						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 56, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:2: op_7 WS b= expression_6
						{
						DebugLocation(221, 2);
						PushFollow(Follow._op_7_in_expression_71170);
						op_7114=op_7();
						PopFollow();

						stream_op_7.Add(op_7114.Tree);
						DebugLocation(221, 7);
						WS115=(IToken)Match(input,WS,Follow._WS_in_expression_71172);  
						stream_WS.Add(WS115);

						DebugLocation(221, 11);
						PushFollow(Follow._expression_6_in_expression_71176);
						b=expression_6();
						PopFollow();

						stream_expression_6.Add(b.Tree);


						{
						// AST REWRITE
						// elements: op_7, expression_7, b
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 221:25: -> ^( T_OP_BINARY op_7 $expression_7 $b)
						{
							DebugLocation(221, 28);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:221:28: ^( T_OP_BINARY op_7 $expression_7 $b)
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(221, 30);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(221, 42);
							adaptor.AddChild(root_1, stream_op_7.NextTree());
							DebugLocation(221, 48);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(221, 62);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:4: IN ( WS )? '(' ( WS )? expression_list_or_select_command ( WS )? ')'
						{
						DebugLocation(222, 4);
						IN116=(IToken)Match(input,IN,Follow._IN_in_expression_71195);  
						stream_IN.Add(IN116);

						DebugLocation(222, 7);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:7: ( WS )?
						int alt45=2;
						try { DebugEnterSubRule(45);
						try { DebugEnterDecision(45, decisionCanBacktrack[45]);
						int LA45_0 = input.LA(1);

						if ((LA45_0==WS))
						{
							alt45 = 1;
						}
						} finally { DebugExitDecision(45); }
						switch (alt45)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:7: WS
							{
							DebugLocation(222, 7);
							WS117=(IToken)Match(input,WS,Follow._WS_in_expression_71197);  
							stream_WS.Add(WS117);


							}
							break;

						}
						} finally { DebugExitSubRule(45); }

						DebugLocation(222, 11);
						char_literal118=(IToken)Match(input,132,Follow._132_in_expression_71200);  
						stream_132.Add(char_literal118);

						DebugLocation(222, 15);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:15: ( WS )?
						int alt46=2;
						try { DebugEnterSubRule(46);
						try { DebugEnterDecision(46, decisionCanBacktrack[46]);
						int LA46_0 = input.LA(1);

						if ((LA46_0==WS))
						{
							alt46 = 1;
						}
						} finally { DebugExitDecision(46); }
						switch (alt46)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:15: WS
							{
							DebugLocation(222, 15);
							WS119=(IToken)Match(input,WS,Follow._WS_in_expression_71202);  
							stream_WS.Add(WS119);


							}
							break;

						}
						} finally { DebugExitSubRule(46); }

						DebugLocation(222, 19);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71205);
						expression_list_or_select_command120=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command120.Tree);
						DebugLocation(222, 53);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:53: ( WS )?
						int alt47=2;
						try { DebugEnterSubRule(47);
						try { DebugEnterDecision(47, decisionCanBacktrack[47]);
						int LA47_0 = input.LA(1);

						if ((LA47_0==WS))
						{
							alt47 = 1;
						}
						} finally { DebugExitDecision(47); }
						switch (alt47)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:53: WS
							{
							DebugLocation(222, 53);
							WS121=(IToken)Match(input,WS,Follow._WS_in_expression_71207);  
							stream_WS.Add(WS121);


							}
							break;

						}
						} finally { DebugExitSubRule(47); }

						DebugLocation(222, 57);
						char_literal122=(IToken)Match(input,133,Follow._133_in_expression_71210);  
						stream_133.Add(char_literal122);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 222:61: -> ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(222, 64);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:222:64: ^( T_OP_BINARY T_IN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(222, 66);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(222, 78);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_IN, "T_IN"));
							DebugLocation(222, 84);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(222, 97);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 3:
						DebugEnterAlt(3);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:4: NOT WS IN ( WS )? '(' ( WS )? ( expression_list_or_select_command ) ( WS )? ')'
						{
						DebugLocation(223, 4);
						NOT123=(IToken)Match(input,NOT,Follow._NOT_in_expression_71228);  
						stream_NOT.Add(NOT123);

						DebugLocation(223, 8);
						WS124=(IToken)Match(input,WS,Follow._WS_in_expression_71230);  
						stream_WS.Add(WS124);

						DebugLocation(223, 11);
						IN125=(IToken)Match(input,IN,Follow._IN_in_expression_71232);  
						stream_IN.Add(IN125);

						DebugLocation(223, 14);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:14: ( WS )?
						int alt48=2;
						try { DebugEnterSubRule(48);
						try { DebugEnterDecision(48, decisionCanBacktrack[48]);
						int LA48_0 = input.LA(1);

						if ((LA48_0==WS))
						{
							alt48 = 1;
						}
						} finally { DebugExitDecision(48); }
						switch (alt48)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:14: WS
							{
							DebugLocation(223, 14);
							WS126=(IToken)Match(input,WS,Follow._WS_in_expression_71234);  
							stream_WS.Add(WS126);


							}
							break;

						}
						} finally { DebugExitSubRule(48); }

						DebugLocation(223, 18);
						char_literal127=(IToken)Match(input,132,Follow._132_in_expression_71237);  
						stream_132.Add(char_literal127);

						DebugLocation(223, 22);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:22: ( WS )?
						int alt49=2;
						try { DebugEnterSubRule(49);
						try { DebugEnterDecision(49, decisionCanBacktrack[49]);
						int LA49_0 = input.LA(1);

						if ((LA49_0==WS))
						{
							alt49 = 1;
						}
						} finally { DebugExitDecision(49); }
						switch (alt49)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:22: WS
							{
							DebugLocation(223, 22);
							WS128=(IToken)Match(input,WS,Follow._WS_in_expression_71239);  
							stream_WS.Add(WS128);


							}
							break;

						}
						} finally { DebugExitSubRule(49); }

						DebugLocation(223, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:26: ( expression_list_or_select_command )
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:27: expression_list_or_select_command
						{
						DebugLocation(223, 27);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71243);
						expression_list_or_select_command129=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command129.Tree);

						}

						DebugLocation(223, 62);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:62: ( WS )?
						int alt50=2;
						try { DebugEnterSubRule(50);
						try { DebugEnterDecision(50, decisionCanBacktrack[50]);
						int LA50_0 = input.LA(1);

						if ((LA50_0==WS))
						{
							alt50 = 1;
						}
						} finally { DebugExitDecision(50); }
						switch (alt50)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:62: WS
							{
							DebugLocation(223, 62);
							WS130=(IToken)Match(input,WS,Follow._WS_in_expression_71246);  
							stream_WS.Add(WS130);


							}
							break;

						}
						} finally { DebugExitSubRule(50); }

						DebugLocation(223, 66);
						char_literal131=(IToken)Match(input,133,Follow._133_in_expression_71249);  
						stream_133.Add(char_literal131);



						{
						// AST REWRITE
						// elements: expression_list_or_select_command, expression_7
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 223:70: -> ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
						{
							DebugLocation(223, 73);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:223:73: ^( T_OP_BINARY T_NOTIN $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(223, 75);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(223, 87);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_NOTIN, "T_NOTIN"));
							DebugLocation(223, 96);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(223, 109);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 4:
						DebugEnterAlt(4);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:4: op_4 ( WS )? ( SOME | ANY ) ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(224, 4);
						PushFollow(Follow._op_4_in_expression_71267);
						op_4132=op_4();
						PopFollow();

						stream_op_4.Add(op_4132.Tree);
						DebugLocation(224, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:9: ( WS )?
						int alt51=2;
						try { DebugEnterSubRule(51);
						try { DebugEnterDecision(51, decisionCanBacktrack[51]);
						int LA51_0 = input.LA(1);

						if ((LA51_0==WS))
						{
							alt51 = 1;
						}
						} finally { DebugExitDecision(51); }
						switch (alt51)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:9: WS
							{
							DebugLocation(224, 9);
							WS133=(IToken)Match(input,WS,Follow._WS_in_expression_71269);  
							stream_WS.Add(WS133);


							}
							break;

						}
						} finally { DebugExitSubRule(51); }

						DebugLocation(224, 13);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:13: ( SOME | ANY )
						int alt52=2;
						try { DebugEnterSubRule(52);
						try { DebugEnterDecision(52, decisionCanBacktrack[52]);
						int LA52_0 = input.LA(1);

						if ((LA52_0==SOME))
						{
							alt52 = 1;
						}
						else if ((LA52_0==ANY))
						{
							alt52 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(52); }
						switch (alt52)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:14: SOME
							{
							DebugLocation(224, 14);
							SOME134=(IToken)Match(input,SOME,Follow._SOME_in_expression_71273);  
							stream_SOME.Add(SOME134);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:21: ANY
							{
							DebugLocation(224, 21);
							ANY135=(IToken)Match(input,ANY,Follow._ANY_in_expression_71277);  
							stream_ANY.Add(ANY135);


							}
							break;

						}
						} finally { DebugExitSubRule(52); }

						DebugLocation(224, 26);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:26: ( WS )?
						int alt53=2;
						try { DebugEnterSubRule(53);
						try { DebugEnterDecision(53, decisionCanBacktrack[53]);
						int LA53_0 = input.LA(1);

						if ((LA53_0==WS))
						{
							alt53 = 1;
						}
						} finally { DebugExitDecision(53); }
						switch (alt53)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:26: WS
							{
							DebugLocation(224, 26);
							WS136=(IToken)Match(input,WS,Follow._WS_in_expression_71280);  
							stream_WS.Add(WS136);


							}
							break;

						}
						} finally { DebugExitSubRule(53); }

						DebugLocation(224, 30);
						char_literal137=(IToken)Match(input,132,Follow._132_in_expression_71283);  
						stream_132.Add(char_literal137);

						DebugLocation(224, 34);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71285);
						expression_list_or_select_command138=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command138.Tree);
						DebugLocation(224, 68);
						char_literal139=(IToken)Match(input,133,Follow._133_in_expression_71287);  
						stream_133.Add(char_literal139);



						{
						// AST REWRITE
						// elements: op_4, expression_7, expression_list_or_select_command
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 224:72: -> ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(224, 75);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:224:75: ^( T_OP_BINARY T_ANY op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(224, 77);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(224, 89);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ANY, "T_ANY"));
							DebugLocation(224, 95);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(224, 101);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(224, 114);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 5:
						DebugEnterAlt(5);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:4: op_4 ( WS )? ALL ( WS )? '(' expression_list_or_select_command ')'
						{
						DebugLocation(225, 4);
						PushFollow(Follow._op_4_in_expression_71307);
						op_4140=op_4();
						PopFollow();

						stream_op_4.Add(op_4140.Tree);
						DebugLocation(225, 9);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:9: ( WS )?
						int alt54=2;
						try { DebugEnterSubRule(54);
						try { DebugEnterDecision(54, decisionCanBacktrack[54]);
						int LA54_0 = input.LA(1);

						if ((LA54_0==WS))
						{
							alt54 = 1;
						}
						} finally { DebugExitDecision(54); }
						switch (alt54)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:9: WS
							{
							DebugLocation(225, 9);
							WS141=(IToken)Match(input,WS,Follow._WS_in_expression_71309);  
							stream_WS.Add(WS141);


							}
							break;

						}
						} finally { DebugExitSubRule(54); }

						DebugLocation(225, 13);
						ALL142=(IToken)Match(input,ALL,Follow._ALL_in_expression_71312);  
						stream_ALL.Add(ALL142);

						DebugLocation(225, 17);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:17: ( WS )?
						int alt55=2;
						try { DebugEnterSubRule(55);
						try { DebugEnterDecision(55, decisionCanBacktrack[55]);
						int LA55_0 = input.LA(1);

						if ((LA55_0==WS))
						{
							alt55 = 1;
						}
						} finally { DebugExitDecision(55); }
						switch (alt55)
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:17: WS
							{
							DebugLocation(225, 17);
							WS143=(IToken)Match(input,WS,Follow._WS_in_expression_71314);  
							stream_WS.Add(WS143);


							}
							break;

						}
						} finally { DebugExitSubRule(55); }

						DebugLocation(225, 21);
						char_literal144=(IToken)Match(input,132,Follow._132_in_expression_71317);  
						stream_132.Add(char_literal144);

						DebugLocation(225, 25);
						PushFollow(Follow._expression_list_or_select_command_in_expression_71319);
						expression_list_or_select_command145=expression_list_or_select_command();
						PopFollow();

						stream_expression_list_or_select_command.Add(expression_list_or_select_command145.Tree);
						DebugLocation(225, 59);
						char_literal146=(IToken)Match(input,133,Follow._133_in_expression_71321);  
						stream_133.Add(char_literal146);



						{
						// AST REWRITE
						// elements: expression_7, expression_list_or_select_command, op_4
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (object)adaptor.Nil();
						// 225:63: -> ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
						{
							DebugLocation(225, 66);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:225:66: ^( T_OP_BINARY T_ALL op_4 $expression_7 expression_list_or_select_command )
							{
							object root_1 = (object)adaptor.Nil();
							DebugLocation(225, 68);
							root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

							DebugLocation(225, 80);
							adaptor.AddChild(root_1, (object)adaptor.Create(T_ALL, "T_ALL"));
							DebugLocation(225, 86);
							adaptor.AddChild(root_1, stream_op_4.NextTree());
							DebugLocation(225, 92);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(225, 105);
							adaptor.AddChild(root_1, stream_expression_list_or_select_command.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(56); }


					}
					break;

				default:
					goto loop57;
				}
			}

			loop57:
				;

			} finally { DebugExitSubRule(57); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_7", 28);
			LeaveRule("expression_7", 28);
			LeaveRule_expression_7();
	    }
	 	DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_7"); }
		return retval;

	}
	// $ANTLR end "expression_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_7() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_7() {}

	// $ANTLR start "op_7"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:229:1: op_7 : ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN );
	[GrammarRule("op_7")]
	private AstParserRuleReturnScope<object, IToken> op_7()
	{
		EnterRule_op_7();
		EnterRule("op_7", 29);
		TraceIn("op_7", 29);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken OR147 = default(IToken);
	    IToken LIKE148 = default(IToken);
	    IToken NOT149 = default(IToken);
	    IToken WS150 = default(IToken);
	    IToken LIKE151 = default(IToken);
	    IToken MATCH152 = default(IToken);
	    IToken NOT153 = default(IToken);
	    IToken WS154 = default(IToken);
	    IToken MATCH155 = default(IToken);
	    IToken BETWEEN156 = default(IToken);
	    IToken NOT157 = default(IToken);
	    IToken WS158 = default(IToken);
	    IToken BETWEEN159 = default(IToken);

	    object OR147_tree = default(object);
	    object LIKE148_tree = default(object);
	    object NOT149_tree = default(object);
	    object WS150_tree = default(object);
	    object LIKE151_tree = default(object);
	    object MATCH152_tree = default(object);
	    object NOT153_tree = default(object);
	    object WS154_tree = default(object);
	    object MATCH155_tree = default(object);
	    object BETWEEN156_tree = default(object);
	    object NOT157_tree = default(object);
	    object WS158_tree = default(object);
	    object BETWEEN159_tree = default(object);
	    RewriteRuleITokenStream stream_MATCH=new RewriteRuleITokenStream(adaptor,"token MATCH");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");
	    RewriteRuleITokenStream stream_BETWEEN=new RewriteRuleITokenStream(adaptor,"token BETWEEN");
	    RewriteRuleITokenStream stream_LIKE=new RewriteRuleITokenStream(adaptor,"token LIKE");
	    RewriteRuleITokenStream stream_OR=new RewriteRuleITokenStream(adaptor,"token OR");

		try { DebugEnterRule(GrammarFileName, "op_7");
		DebugLocation(229, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:229:6: ( OR -> T_OR | LIKE -> T_LIKE | NOT WS LIKE -> T_NOTLIKE | MATCH -> T_MATCH | NOT WS MATCH -> T_NOTMATCH | BETWEEN -> T_BETWEEN | NOT WS BETWEEN -> T_NOTBETWEEN )
			int alt58=7;
			try { DebugEnterDecision(58, decisionCanBacktrack[58]);
			switch (input.LA(1))
			{
			case OR:
				{
				alt58 = 1;
				}
				break;
			case LIKE:
				{
				alt58 = 2;
				}
				break;
			case NOT:
				{
				int LA58_3 = input.LA(2);

				if ((LA58_3==WS))
				{
					switch (input.LA(3))
					{
					case LIKE:
						{
						alt58 = 3;
						}
						break;
					case MATCH:
						{
						alt58 = 5;
						}
						break;
					case BETWEEN:
						{
						alt58 = 7;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 58, 6, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 58, 3, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case MATCH:
				{
				alt58 = 4;
				}
				break;
			case BETWEEN:
				{
				alt58 = 6;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:229:8: OR
				{
				DebugLocation(229, 8);
				OR147=(IToken)Match(input,OR,Follow._OR_in_op_71351);  
				stream_OR.Add(OR147);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 229:11: -> T_OR
				{
					DebugLocation(229, 14);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_OR, "T_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:230:4: LIKE
				{
				DebugLocation(230, 4);
				LIKE148=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71360);  
				stream_LIKE.Add(LIKE148);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 230:9: -> T_LIKE
				{
					DebugLocation(230, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LIKE, "T_LIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:231:4: NOT WS LIKE
				{
				DebugLocation(231, 4);
				NOT149=(IToken)Match(input,NOT,Follow._NOT_in_op_71369);  
				stream_NOT.Add(NOT149);

				DebugLocation(231, 8);
				WS150=(IToken)Match(input,WS,Follow._WS_in_op_71371);  
				stream_WS.Add(WS150);

				DebugLocation(231, 11);
				LIKE151=(IToken)Match(input,LIKE,Follow._LIKE_in_op_71373);  
				stream_LIKE.Add(LIKE151);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 231:16: -> T_NOTLIKE
				{
					DebugLocation(231, 19);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLIKE, "T_NOTLIKE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:232:4: MATCH
				{
				DebugLocation(232, 4);
				MATCH152=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71382);  
				stream_MATCH.Add(MATCH152);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 232:10: -> T_MATCH
				{
					DebugLocation(232, 13);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MATCH, "T_MATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:233:4: NOT WS MATCH
				{
				DebugLocation(233, 4);
				NOT153=(IToken)Match(input,NOT,Follow._NOT_in_op_71391);  
				stream_NOT.Add(NOT153);

				DebugLocation(233, 8);
				WS154=(IToken)Match(input,WS,Follow._WS_in_op_71393);  
				stream_WS.Add(WS154);

				DebugLocation(233, 11);
				MATCH155=(IToken)Match(input,MATCH,Follow._MATCH_in_op_71395);  
				stream_MATCH.Add(MATCH155);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 233:17: -> T_NOTMATCH
				{
					DebugLocation(233, 20);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTMATCH, "T_NOTMATCH"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:234:4: BETWEEN
				{
				DebugLocation(234, 4);
				BETWEEN156=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71404);  
				stream_BETWEEN.Add(BETWEEN156);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 234:12: -> T_BETWEEN
				{
					DebugLocation(234, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BETWEEN, "T_BETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:235:4: NOT WS BETWEEN
				{
				DebugLocation(235, 4);
				NOT157=(IToken)Match(input,NOT,Follow._NOT_in_op_71413);  
				stream_NOT.Add(NOT157);

				DebugLocation(235, 8);
				WS158=(IToken)Match(input,WS,Follow._WS_in_op_71415);  
				stream_WS.Add(WS158);

				DebugLocation(235, 11);
				BETWEEN159=(IToken)Match(input,BETWEEN,Follow._BETWEEN_in_op_71417);  
				stream_BETWEEN.Add(BETWEEN159);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 235:19: -> T_NOTBETWEEN
				{
					DebugLocation(235, 22);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTBETWEEN, "T_NOTBETWEEN"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_7", 29);
			LeaveRule("op_7", 29);
			LeaveRule_op_7();
	    }
	 	DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "op_7"); }
		return retval;

	}
	// $ANTLR end "op_7"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_6() {}

	// $ANTLR start "expression_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:238:1: expression_6 : (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* ;
	[GrammarRule("expression_6")]
	private AstParserRuleReturnScope<object, IToken> expression_6()
	{
		EnterRule_expression_6();
		EnterRule("expression_6", 30);
		TraceIn("expression_6", 30);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS160 = default(IToken);
	    IToken WS162 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_6161 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS160_tree = default(object);
	    object WS162_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_6=new RewriteRuleSubtreeStream(adaptor,"rule op_6");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
		try { DebugEnterRule(GrammarFileName, "expression_6");
		DebugLocation(238, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:2: ( (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:4: (a= expression_5 -> $a) ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			{
			DebugLocation(239, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:4: (a= expression_5 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:5: a= expression_5
			{
			DebugLocation(239, 6);
			PushFollow(Follow._expression_5_in_expression_61436);
			a=expression_5();
			PopFollow();

			stream_expression_5.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 239:19: -> $a
			{
				DebugLocation(239, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(239, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:25: ( WS op_6 WS b= expression_5 -> ^( T_OP_BINARY op_6 $expression_6 $b) )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, decisionCanBacktrack[59]);
				int LA59_0 = input.LA(1);

				if ((LA59_0==WS))
				{
					int LA59_1 = input.LA(2);

					if ((LA59_1==AND))
					{
						alt59 = 1;
					}


				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:26: WS op_6 WS b= expression_5
					{
					DebugLocation(239, 26);
					WS160=(IToken)Match(input,WS,Follow._WS_in_expression_61443);  
					stream_WS.Add(WS160);

					DebugLocation(239, 29);
					PushFollow(Follow._op_6_in_expression_61445);
					op_6161=op_6();
					PopFollow();

					stream_op_6.Add(op_6161.Tree);
					DebugLocation(239, 34);
					WS162=(IToken)Match(input,WS,Follow._WS_in_expression_61447);  
					stream_WS.Add(WS162);

					DebugLocation(239, 38);
					PushFollow(Follow._expression_5_in_expression_61451);
					b=expression_5();
					PopFollow();

					stream_expression_5.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_6, op_6
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 239:52: -> ^( T_OP_BINARY op_6 $expression_6 $b)
					{
						DebugLocation(239, 55);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:239:55: ^( T_OP_BINARY op_6 $expression_6 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(239, 57);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(239, 69);
						adaptor.AddChild(root_1, stream_op_6.NextTree());
						DebugLocation(239, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(239, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_6", 30);
			LeaveRule("expression_6", 30);
			LeaveRule_expression_6();
	    }
	 	DebugLocation(240, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_6"); }
		return retval;

	}
	// $ANTLR end "expression_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_6() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_6() {}

	// $ANTLR start "op_6"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:1: op_6 : AND -> T_AND ;
	[GrammarRule("op_6")]
	private AstParserRuleReturnScope<object, IToken> op_6()
	{
		EnterRule_op_6();
		EnterRule("op_6", 31);
		TraceIn("op_6", 31);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken AND163 = default(IToken);

	    object AND163_tree = default(object);
	    RewriteRuleITokenStream stream_AND=new RewriteRuleITokenStream(adaptor,"token AND");

		try { DebugEnterRule(GrammarFileName, "op_6");
		DebugLocation(242, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:6: ( AND -> T_AND )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:242:8: AND
			{
			DebugLocation(242, 8);
			AND163=(IToken)Match(input,AND,Follow._AND_in_op_61479);  
			stream_AND.Add(AND163);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 242:12: -> T_AND
			{
				DebugLocation(242, 15);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_AND, "T_AND"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_6", 31);
			LeaveRule("op_6", 31);
			LeaveRule_op_6();
	    }
	 	DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "op_6"); }
		return retval;

	}
	// $ANTLR end "op_6"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_5() {}

	// $ANTLR start "expression_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:245:1: expression_5 : ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 );
	[GrammarRule("expression_5")]
	private AstParserRuleReturnScope<object, IToken> expression_5()
	{
		EnterRule_expression_5();
		EnterRule("expression_5", 32);
		TraceIn("expression_5", 32);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS165 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_5164 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_5166 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_4167 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS165_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_5=new RewriteRuleSubtreeStream(adaptor,"rule expression_5");
	    RewriteRuleSubtreeStream stream_op_5=new RewriteRuleSubtreeStream(adaptor,"rule op_5");
		try { DebugEnterRule(GrammarFileName, "expression_5");
		DebugLocation(245, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:2: ( op_5 WS expression_5 -> ^( T_OP_UNARY op_5 expression_5 ) | expression_4 )
			int alt60=2;
			try { DebugEnterDecision(60, decisionCanBacktrack[60]);
			int LA60_0 = input.LA(1);

			if ((LA60_0==NOT))
			{
				alt60 = 1;
			}
			else if (((LA60_0>=CASE && LA60_0<=CAST)||LA60_0==CONVERT||LA60_0==EXISTS||LA60_0==NUMBER||LA60_0==SIMPLE_FILE||(LA60_0>=STRING && LA60_0<=SYSTEMVAR)||LA60_0==TOKEN||LA60_0==132))
			{
				alt60 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 60, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:4: op_5 WS expression_5
				{
				DebugLocation(246, 4);
				PushFollow(Follow._op_5_in_expression_51497);
				op_5164=op_5();
				PopFollow();

				stream_op_5.Add(op_5164.Tree);
				DebugLocation(246, 9);
				WS165=(IToken)Match(input,WS,Follow._WS_in_expression_51499);  
				stream_WS.Add(WS165);

				DebugLocation(246, 12);
				PushFollow(Follow._expression_5_in_expression_51501);
				expression_5166=expression_5();
				PopFollow();

				stream_expression_5.Add(expression_5166.Tree);


				{
				// AST REWRITE
				// elements: expression_5, op_5
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 246:25: -> ^( T_OP_UNARY op_5 expression_5 )
				{
					DebugLocation(246, 28);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:246:28: ^( T_OP_UNARY op_5 expression_5 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(246, 30);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(246, 41);
					adaptor.AddChild(root_1, stream_op_5.NextTree());
					DebugLocation(246, 46);
					adaptor.AddChild(root_1, stream_expression_5.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:247:4: expression_4
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(247, 4);
				PushFollow(Follow._expression_4_in_expression_51516);
				expression_4167=expression_4();
				PopFollow();

				adaptor.AddChild(root_0, expression_4167.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_5", 32);
			LeaveRule("expression_5", 32);
			LeaveRule_expression_5();
	    }
	 	DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_5"); }
		return retval;

	}
	// $ANTLR end "expression_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_5() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_5() {}

	// $ANTLR start "op_5"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:1: op_5 : NOT -> T_NOT ;
	[GrammarRule("op_5")]
	private AstParserRuleReturnScope<object, IToken> op_5()
	{
		EnterRule_op_5();
		EnterRule("op_5", 33);
		TraceIn("op_5", 33);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NOT168 = default(IToken);

	    object NOT168_tree = default(object);
	    RewriteRuleITokenStream stream_NOT=new RewriteRuleITokenStream(adaptor,"token NOT");

		try { DebugEnterRule(GrammarFileName, "op_5");
		DebugLocation(250, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:7: ( NOT -> T_NOT )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:250:9: NOT
			{
			DebugLocation(250, 9);
			NOT168=(IToken)Match(input,NOT,Follow._NOT_in_op_51527);  
			stream_NOT.Add(NOT168);



			{
			// AST REWRITE
			// elements: 
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 250:13: -> T_NOT
			{
				DebugLocation(250, 16);
				adaptor.AddChild(root_0, (object)adaptor.Create(T_NOT, "T_NOT"));

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_5", 33);
			LeaveRule("op_5", 33);
			LeaveRule_op_5();
	    }
	 	DebugLocation(251, 1);
		} finally { DebugExitRule(GrammarFileName, "op_5"); }
		return retval;

	}
	// $ANTLR end "op_5"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_4() {}

	// $ANTLR start "expression_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:253:1: expression_4 : (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* ;
	[GrammarRule("expression_4")]
	private AstParserRuleReturnScope<object, IToken> expression_4()
	{
		EnterRule_expression_4();
		EnterRule("expression_4", 34);
		TraceIn("expression_4", 34);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS169 = default(IToken);
	    IToken WS171 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_4170 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS169_tree = default(object);
	    object WS171_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_3=new RewriteRuleSubtreeStream(adaptor,"rule expression_3");
	    RewriteRuleSubtreeStream stream_op_4=new RewriteRuleSubtreeStream(adaptor,"rule op_4");
		try { DebugEnterRule(GrammarFileName, "expression_4");
		DebugLocation(253, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:2: ( (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:4: (a= expression_3 -> $a) ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			{
			DebugLocation(254, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:4: (a= expression_3 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:5: a= expression_3
			{
			DebugLocation(254, 6);
			PushFollow(Follow._expression_3_in_expression_41546);
			a=expression_3();
			PopFollow();

			stream_expression_3.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 254:19: -> $a
			{
				DebugLocation(254, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(254, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:25: ( ( WS )? op_4 ( WS )? b= expression_3 -> ^( T_OP_BINARY op_4 $expression_4 $b) )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, decisionCanBacktrack[63]);
				int LA63_0 = input.LA(1);

				if ((LA63_0==WS))
				{
					switch (input.LA(2))
					{
					case 143:
						{
						int LA63_4 = input.LA(3);

						if ((LA63_4==WS))
						{
							int LA63_13 = input.LA(4);

							if (((LA63_13>=CASE && LA63_13<=CAST)||LA63_13==CONVERT||LA63_13==EXISTS||LA63_13==NUMBER||LA63_13==SIMPLE_FILE||(LA63_13>=STRING && LA63_13<=SYSTEMVAR)||LA63_13==TOKEN||LA63_13==132))
							{
								alt63 = 1;
							}


						}
						else if (((LA63_4>=CASE && LA63_4<=CAST)||LA63_4==CONVERT||LA63_4==EXISTS||LA63_4==NUMBER||LA63_4==SIMPLE_FILE||(LA63_4>=STRING && LA63_4<=SYSTEMVAR)||LA63_4==TOKEN||LA63_4==132))
						{
							alt63 = 1;
						}


						}
						break;
					case 145:
						{
						int LA63_5 = input.LA(3);

						if ((LA63_5==WS))
						{
							int LA63_13 = input.LA(4);

							if (((LA63_13>=CASE && LA63_13<=CAST)||LA63_13==CONVERT||LA63_13==EXISTS||LA63_13==NUMBER||LA63_13==SIMPLE_FILE||(LA63_13>=STRING && LA63_13<=SYSTEMVAR)||LA63_13==TOKEN||LA63_13==132))
							{
								alt63 = 1;
							}


						}
						else if (((LA63_5>=CASE && LA63_5<=CAST)||LA63_5==CONVERT||LA63_5==EXISTS||LA63_5==NUMBER||LA63_5==SIMPLE_FILE||(LA63_5>=STRING && LA63_5<=SYSTEMVAR)||LA63_5==TOKEN||LA63_5==132))
						{
							alt63 = 1;
						}


						}
						break;
					case 141:
						{
						int LA63_6 = input.LA(3);

						if ((LA63_6==WS))
						{
							int LA63_13 = input.LA(4);

							if (((LA63_13>=CASE && LA63_13<=CAST)||LA63_13==CONVERT||LA63_13==EXISTS||LA63_13==NUMBER||LA63_13==SIMPLE_FILE||(LA63_13>=STRING && LA63_13<=SYSTEMVAR)||LA63_13==TOKEN||LA63_13==132))
							{
								alt63 = 1;
							}


						}
						else if (((LA63_6>=CASE && LA63_6<=CAST)||LA63_6==CONVERT||LA63_6==EXISTS||LA63_6==NUMBER||LA63_6==SIMPLE_FILE||(LA63_6>=STRING && LA63_6<=SYSTEMVAR)||LA63_6==TOKEN||LA63_6==132))
						{
							alt63 = 1;
						}


						}
						break;
					case 142:
						{
						int LA63_7 = input.LA(3);

						if ((LA63_7==WS))
						{
							int LA63_13 = input.LA(4);

							if (((LA63_13>=CASE && LA63_13<=CAST)||LA63_13==CONVERT||LA63_13==EXISTS||LA63_13==NUMBER||LA63_13==SIMPLE_FILE||(LA63_13>=STRING && LA63_13<=SYSTEMVAR)||LA63_13==TOKEN||LA63_13==132))
							{
								alt63 = 1;
							}


						}
						else if (((LA63_7>=CASE && LA63_7<=CAST)||LA63_7==CONVERT||LA63_7==EXISTS||LA63_7==NUMBER||LA63_7==SIMPLE_FILE||(LA63_7>=STRING && LA63_7<=SYSTEMVAR)||LA63_7==TOKEN||LA63_7==132))
						{
							alt63 = 1;
						}


						}
						break;
					case 128:
						{
						int LA63_8 = input.LA(3);

						if ((LA63_8==WS))
						{
							int LA63_13 = input.LA(4);

							if (((LA63_13>=CASE && LA63_13<=CAST)||LA63_13==CONVERT||LA63_13==EXISTS||LA63_13==NUMBER||LA63_13==SIMPLE_FILE||(LA63_13>=STRING && LA63_13<=SYSTEMVAR)||LA63_13==TOKEN||LA63_13==132))
							{
								alt63 = 1;
							}


						}
						else if (((LA63_8>=CASE && LA63_8<=CAST)||LA63_8==CONVERT||LA63_8==EXISTS||LA63_8==NUMBER||LA63_8==SIMPLE_FILE||(LA63_8>=STRING && LA63_8<=SYSTEMVAR)||LA63_8==TOKEN||LA63_8==132))
						{
							alt63 = 1;
						}


						}
						break;
					case 129:
						{
						int LA63_9 = input.LA(3);

						if ((LA63_9==WS))
						{
							int LA63_13 = input.LA(4);

							if (((LA63_13>=CASE && LA63_13<=CAST)||LA63_13==CONVERT||LA63_13==EXISTS||LA63_13==NUMBER||LA63_13==SIMPLE_FILE||(LA63_13>=STRING && LA63_13<=SYSTEMVAR)||LA63_13==TOKEN||LA63_13==132))
							{
								alt63 = 1;
							}


						}
						else if (((LA63_9>=CASE && LA63_9<=CAST)||LA63_9==CONVERT||LA63_9==EXISTS||LA63_9==NUMBER||LA63_9==SIMPLE_FILE||(LA63_9>=STRING && LA63_9<=SYSTEMVAR)||LA63_9==TOKEN||LA63_9==132))
						{
							alt63 = 1;
						}


						}
						break;
					case 127:
						{
						int LA63_10 = input.LA(3);

						if ((LA63_10==WS))
						{
							int LA63_13 = input.LA(4);

							if (((LA63_13>=CASE && LA63_13<=CAST)||LA63_13==CONVERT||LA63_13==EXISTS||LA63_13==NUMBER||LA63_13==SIMPLE_FILE||(LA63_13>=STRING && LA63_13<=SYSTEMVAR)||LA63_13==TOKEN||LA63_13==132))
							{
								alt63 = 1;
							}


						}
						else if (((LA63_10>=CASE && LA63_10<=CAST)||LA63_10==CONVERT||LA63_10==EXISTS||LA63_10==NUMBER||LA63_10==SIMPLE_FILE||(LA63_10>=STRING && LA63_10<=SYSTEMVAR)||LA63_10==TOKEN||LA63_10==132))
						{
							alt63 = 1;
						}


						}
						break;
					case 144:
						{
						int LA63_11 = input.LA(3);

						if ((LA63_11==WS))
						{
							int LA63_13 = input.LA(4);

							if (((LA63_13>=CASE && LA63_13<=CAST)||LA63_13==CONVERT||LA63_13==EXISTS||LA63_13==NUMBER||LA63_13==SIMPLE_FILE||(LA63_13>=STRING && LA63_13<=SYSTEMVAR)||LA63_13==TOKEN||LA63_13==132))
							{
								alt63 = 1;
							}


						}
						else if (((LA63_11>=CASE && LA63_11<=CAST)||LA63_11==CONVERT||LA63_11==EXISTS||LA63_11==NUMBER||LA63_11==SIMPLE_FILE||(LA63_11>=STRING && LA63_11<=SYSTEMVAR)||LA63_11==TOKEN||LA63_11==132))
						{
							alt63 = 1;
						}


						}
						break;
					case 140:
						{
						int LA63_12 = input.LA(3);

						if ((LA63_12==WS))
						{
							int LA63_13 = input.LA(4);

							if (((LA63_13>=CASE && LA63_13<=CAST)||LA63_13==CONVERT||LA63_13==EXISTS||LA63_13==NUMBER||LA63_13==SIMPLE_FILE||(LA63_13>=STRING && LA63_13<=SYSTEMVAR)||LA63_13==TOKEN||LA63_13==132))
							{
								alt63 = 1;
							}


						}
						else if (((LA63_12>=CASE && LA63_12<=CAST)||LA63_12==CONVERT||LA63_12==EXISTS||LA63_12==NUMBER||LA63_12==SIMPLE_FILE||(LA63_12>=STRING && LA63_12<=SYSTEMVAR)||LA63_12==TOKEN||LA63_12==132))
						{
							alt63 = 1;
						}


						}
						break;
					}

				}
				else if (((LA63_0>=127 && LA63_0<=129)||(LA63_0>=140 && LA63_0<=145)))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:26: ( WS )? op_4 ( WS )? b= expression_3
					{
					DebugLocation(254, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:26: ( WS )?
					int alt61=2;
					try { DebugEnterSubRule(61);
					try { DebugEnterDecision(61, decisionCanBacktrack[61]);
					int LA61_0 = input.LA(1);

					if ((LA61_0==WS))
					{
						alt61 = 1;
					}
					} finally { DebugExitDecision(61); }
					switch (alt61)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:26: WS
						{
						DebugLocation(254, 26);
						WS169=(IToken)Match(input,WS,Follow._WS_in_expression_41553);  
						stream_WS.Add(WS169);


						}
						break;

					}
					} finally { DebugExitSubRule(61); }

					DebugLocation(254, 30);
					PushFollow(Follow._op_4_in_expression_41556);
					op_4170=op_4();
					PopFollow();

					stream_op_4.Add(op_4170.Tree);
					DebugLocation(254, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:35: ( WS )?
					int alt62=2;
					try { DebugEnterSubRule(62);
					try { DebugEnterDecision(62, decisionCanBacktrack[62]);
					int LA62_0 = input.LA(1);

					if ((LA62_0==WS))
					{
						alt62 = 1;
					}
					} finally { DebugExitDecision(62); }
					switch (alt62)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:35: WS
						{
						DebugLocation(254, 35);
						WS171=(IToken)Match(input,WS,Follow._WS_in_expression_41558);  
						stream_WS.Add(WS171);


						}
						break;

					}
					} finally { DebugExitSubRule(62); }

					DebugLocation(254, 40);
					PushFollow(Follow._expression_3_in_expression_41563);
					b=expression_3();
					PopFollow();

					stream_expression_3.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, expression_4, op_4
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 254:54: -> ^( T_OP_BINARY op_4 $expression_4 $b)
					{
						DebugLocation(254, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:254:57: ^( T_OP_BINARY op_4 $expression_4 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(254, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(254, 71);
						adaptor.AddChild(root_1, stream_op_4.NextTree());
						DebugLocation(254, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(254, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_4", 34);
			LeaveRule("expression_4", 34);
			LeaveRule_expression_4();
	    }
	 	DebugLocation(255, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_4"); }
		return retval;

	}
	// $ANTLR end "expression_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_4() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_4() {}

	// $ANTLR start "op_4"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:1: op_4 : ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS );
	[GrammarRule("op_4")]
	private AstParserRuleReturnScope<object, IToken> op_4()
	{
		EnterRule_op_4();
		EnterRule("op_4", 35);
		TraceIn("op_4", 35);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal172 = default(IToken);
	    IToken string_literal173 = default(IToken);
	    IToken string_literal174 = default(IToken);
	    IToken string_literal175 = default(IToken);
	    IToken string_literal176 = default(IToken);
	    IToken string_literal177 = default(IToken);
	    IToken string_literal178 = default(IToken);
	    IToken char_literal179 = default(IToken);
	    IToken char_literal180 = default(IToken);

	    object char_literal172_tree = default(object);
	    object string_literal173_tree = default(object);
	    object string_literal174_tree = default(object);
	    object string_literal175_tree = default(object);
	    object string_literal176_tree = default(object);
	    object string_literal177_tree = default(object);
	    object string_literal178_tree = default(object);
	    object char_literal179_tree = default(object);
	    object char_literal180_tree = default(object);
	    RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
	    RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
	    RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
	    RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
	    RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
	    RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
	    RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
	    RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
	    RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");

		try { DebugEnterRule(GrammarFileName, "op_4");
		DebugLocation(257, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:6: ( '=' -> T_EQUAL | '>=' -> T_NOTLESS | '<=' -> T_NOTGREATER | '<>' -> T_NOTEQUAL | '!=' -> T_NOTEQUAL | '!>' -> T_NOTGREATER | '!<' -> T_NOTLESS | '>' -> T_GREATER | '<' -> T_LESS )
			int alt64=9;
			try { DebugEnterDecision(64, decisionCanBacktrack[64]);
			switch (input.LA(1))
			{
			case 143:
				{
				alt64 = 1;
				}
				break;
			case 145:
				{
				alt64 = 2;
				}
				break;
			case 141:
				{
				alt64 = 3;
				}
				break;
			case 142:
				{
				alt64 = 4;
				}
				break;
			case 128:
				{
				alt64 = 5;
				}
				break;
			case 129:
				{
				alt64 = 6;
				}
				break;
			case 127:
				{
				alt64 = 7;
				}
				break;
			case 144:
				{
				alt64 = 8;
				}
				break;
			case 140:
				{
				alt64 = 9;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 64, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:257:8: '='
				{
				DebugLocation(257, 8);
				char_literal172=(IToken)Match(input,143,Follow._143_in_op_41589);  
				stream_143.Add(char_literal172);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 257:12: -> T_EQUAL
				{
					DebugLocation(257, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_EQUAL, "T_EQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:258:4: '>='
				{
				DebugLocation(258, 4);
				string_literal173=(IToken)Match(input,145,Follow._145_in_op_41598);  
				stream_145.Add(string_literal173);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 258:9: -> T_NOTLESS
				{
					DebugLocation(258, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:259:4: '<='
				{
				DebugLocation(259, 4);
				string_literal174=(IToken)Match(input,141,Follow._141_in_op_41608);  
				stream_141.Add(string_literal174);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 259:9: -> T_NOTGREATER
				{
					DebugLocation(259, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:260:4: '<>'
				{
				DebugLocation(260, 4);
				string_literal175=(IToken)Match(input,142,Follow._142_in_op_41618);  
				stream_142.Add(string_literal175);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 260:9: -> T_NOTEQUAL
				{
					DebugLocation(260, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:261:4: '!='
				{
				DebugLocation(261, 4);
				string_literal176=(IToken)Match(input,128,Follow._128_in_op_41627);  
				stream_128.Add(string_literal176);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 261:9: -> T_NOTEQUAL
				{
					DebugLocation(261, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTEQUAL, "T_NOTEQUAL"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:262:4: '!>'
				{
				DebugLocation(262, 4);
				string_literal177=(IToken)Match(input,129,Follow._129_in_op_41636);  
				stream_129.Add(string_literal177);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 262:9: -> T_NOTGREATER
				{
					DebugLocation(262, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTGREATER, "T_NOTGREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:263:4: '!<'
				{
				DebugLocation(263, 4);
				string_literal178=(IToken)Match(input,127,Follow._127_in_op_41645);  
				stream_127.Add(string_literal178);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 263:9: -> T_NOTLESS
				{
					DebugLocation(263, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_NOTLESS, "T_NOTLESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:264:4: '>'
				{
				DebugLocation(264, 4);
				char_literal179=(IToken)Match(input,144,Follow._144_in_op_41654);  
				stream_144.Add(char_literal179);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 264:8: -> T_GREATER
				{
					DebugLocation(264, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_GREATER, "T_GREATER"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:265:4: '<'
				{
				DebugLocation(265, 4);
				char_literal180=(IToken)Match(input,140,Follow._140_in_op_41664);  
				stream_140.Add(char_literal180);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 265:8: -> T_LESS
				{
					DebugLocation(265, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_LESS, "T_LESS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_4", 35);
			LeaveRule("op_4", 35);
			LeaveRule_op_4();
	    }
	 	DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "op_4"); }
		return retval;

	}
	// $ANTLR end "op_4"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_3() {}

	// $ANTLR start "expression_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:268:1: expression_3 : (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* ;
	[GrammarRule("expression_3")]
	private AstParserRuleReturnScope<object, IToken> expression_3()
	{
		EnterRule_expression_3();
		EnterRule("expression_3", 36);
		TraceIn("expression_3", 36);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS181 = default(IToken);
	    IToken WS183 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_3182 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS181_tree = default(object);
	    object WS183_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_3=new RewriteRuleSubtreeStream(adaptor,"rule op_3");
	    RewriteRuleSubtreeStream stream_expression_2=new RewriteRuleSubtreeStream(adaptor,"rule expression_2");
		try { DebugEnterRule(GrammarFileName, "expression_3");
		DebugLocation(268, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:2: ( (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:4: (a= expression_2 -> $a) ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			{
			DebugLocation(269, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:4: (a= expression_2 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:5: a= expression_2
			{
			DebugLocation(269, 6);
			PushFollow(Follow._expression_2_in_expression_31683);
			a=expression_2();
			PopFollow();

			stream_expression_2.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 269:19: -> $a
			{
				DebugLocation(269, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(269, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:25: ( ( WS )? op_3 ( WS )? b= expression_2 -> ^( T_OP_BINARY op_3 $expression_3 $b) )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, decisionCanBacktrack[67]);
				int LA67_0 = input.LA(1);

				if ((LA67_0==WS))
				{
					int LA67_1 = input.LA(2);

					if ((LA67_1==131||LA67_1==135||LA67_1==137||(LA67_1>=148 && LA67_1<=149)))
					{
						alt67 = 1;
					}


				}
				else if ((LA67_0==131||LA67_0==135||LA67_0==137||(LA67_0>=148 && LA67_0<=149)))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:26: ( WS )? op_3 ( WS )? b= expression_2
					{
					DebugLocation(269, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:26: ( WS )?
					int alt65=2;
					try { DebugEnterSubRule(65);
					try { DebugEnterDecision(65, decisionCanBacktrack[65]);
					int LA65_0 = input.LA(1);

					if ((LA65_0==WS))
					{
						alt65 = 1;
					}
					} finally { DebugExitDecision(65); }
					switch (alt65)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:26: WS
						{
						DebugLocation(269, 26);
						WS181=(IToken)Match(input,WS,Follow._WS_in_expression_31690);  
						stream_WS.Add(WS181);


						}
						break;

					}
					} finally { DebugExitSubRule(65); }

					DebugLocation(269, 30);
					PushFollow(Follow._op_3_in_expression_31693);
					op_3182=op_3();
					PopFollow();

					stream_op_3.Add(op_3182.Tree);
					DebugLocation(269, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:35: ( WS )?
					int alt66=2;
					try { DebugEnterSubRule(66);
					try { DebugEnterDecision(66, decisionCanBacktrack[66]);
					int LA66_0 = input.LA(1);

					if ((LA66_0==WS))
					{
						alt66 = 1;
					}
					} finally { DebugExitDecision(66); }
					switch (alt66)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:35: WS
						{
						DebugLocation(269, 35);
						WS183=(IToken)Match(input,WS,Follow._WS_in_expression_31695);  
						stream_WS.Add(WS183);


						}
						break;

					}
					} finally { DebugExitSubRule(66); }

					DebugLocation(269, 40);
					PushFollow(Follow._expression_2_in_expression_31700);
					b=expression_2();
					PopFollow();

					stream_expression_2.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_3, b, op_3
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 269:54: -> ^( T_OP_BINARY op_3 $expression_3 $b)
					{
						DebugLocation(269, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:269:57: ^( T_OP_BINARY op_3 $expression_3 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(269, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(269, 71);
						adaptor.AddChild(root_1, stream_op_3.NextTree());
						DebugLocation(269, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(269, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_3", 36);
			LeaveRule("expression_3", 36);
			LeaveRule_expression_3();
	    }
	 	DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_3"); }
		return retval;

	}
	// $ANTLR end "expression_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_3() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_3() {}

	// $ANTLR start "op_3"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:1: op_3 : ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR );
	[GrammarRule("op_3")]
	private AstParserRuleReturnScope<object, IToken> op_3()
	{
		EnterRule_op_3();
		EnterRule("op_3", 37);
		TraceIn("op_3", 37);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal184 = default(IToken);
	    IToken char_literal185 = default(IToken);
	    IToken char_literal186 = default(IToken);
	    IToken char_literal187 = default(IToken);
	    IToken char_literal188 = default(IToken);

	    object char_literal184_tree = default(object);
	    object char_literal185_tree = default(object);
	    object char_literal186_tree = default(object);
	    object char_literal187_tree = default(object);
	    object char_literal188_tree = default(object);
	    RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
	    RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
	    RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
	    RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
	    RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");

		try { DebugEnterRule(GrammarFileName, "op_3");
		DebugLocation(272, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:6: ( '+' -> T_PLUS | '-' -> T_MINUS | '&' -> T_BITWISE_AND | '|' -> T_BITWISE_OR | '^' -> T_BITWISE_XOR )
			int alt68=5;
			try { DebugEnterDecision(68, decisionCanBacktrack[68]);
			switch (input.LA(1))
			{
			case 135:
				{
				alt68 = 1;
				}
				break;
			case 137:
				{
				alt68 = 2;
				}
				break;
			case 131:
				{
				alt68 = 3;
				}
				break;
			case 149:
				{
				alt68 = 4;
				}
				break;
			case 148:
				{
				alt68 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:272:8: '+'
				{
				DebugLocation(272, 8);
				char_literal184=(IToken)Match(input,135,Follow._135_in_op_31726);  
				stream_135.Add(char_literal184);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 272:12: -> T_PLUS
				{
					DebugLocation(272, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:273:4: '-'
				{
				DebugLocation(273, 4);
				char_literal185=(IToken)Match(input,137,Follow._137_in_op_31735);  
				stream_137.Add(char_literal185);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 273:8: -> T_MINUS
				{
					DebugLocation(273, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:274:4: '&'
				{
				DebugLocation(274, 4);
				char_literal186=(IToken)Match(input,131,Follow._131_in_op_31744);  
				stream_131.Add(char_literal186);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 274:8: -> T_BITWISE_AND
				{
					DebugLocation(274, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_AND, "T_BITWISE_AND"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:275:4: '|'
				{
				DebugLocation(275, 4);
				char_literal187=(IToken)Match(input,149,Follow._149_in_op_31753);  
				stream_149.Add(char_literal187);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 275:8: -> T_BITWISE_OR
				{
					DebugLocation(275, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_OR, "T_BITWISE_OR"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:276:4: '^'
				{
				DebugLocation(276, 4);
				char_literal188=(IToken)Match(input,148,Follow._148_in_op_31762);  
				stream_148.Add(char_literal188);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 276:8: -> T_BITWISE_XOR
				{
					DebugLocation(276, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_XOR, "T_BITWISE_XOR"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_3", 37);
			LeaveRule("op_3", 37);
			LeaveRule_op_3();
	    }
	 	DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "op_3"); }
		return retval;

	}
	// $ANTLR end "op_3"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_2() {}

	// $ANTLR start "expression_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:285:1: expression_2 : (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* ;
	[GrammarRule("expression_2")]
	private AstParserRuleReturnScope<object, IToken> expression_2()
	{
		EnterRule_expression_2();
		EnterRule("expression_2", 38);
		TraceIn("expression_2", 38);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WS189 = default(IToken);
	    IToken WS191 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> op_2190 = default(AstParserRuleReturnScope<object, IToken>);

	    object WS189_tree = default(object);
	    object WS191_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_op_2=new RewriteRuleSubtreeStream(adaptor,"rule op_2");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
		try { DebugEnterRule(GrammarFileName, "expression_2");
		DebugLocation(285, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:2: ( (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )* )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:4: (a= expression_1 -> $a) ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			{
			DebugLocation(286, 4);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:4: (a= expression_1 -> $a)
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:5: a= expression_1
			{
			DebugLocation(286, 6);
			PushFollow(Follow._expression_1_in_expression_21784);
			a=expression_1();
			PopFollow();

			stream_expression_1.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 286:19: -> $a
			{
				DebugLocation(286, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(286, 25);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:25: ( ( WS )? op_2 ( WS )? b= expression_1 -> ^( T_OP_BINARY op_2 $expression_2 $b) )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, decisionCanBacktrack[71]);
				int LA71_0 = input.LA(1);

				if ((LA71_0==WS))
				{
					int LA71_1 = input.LA(2);

					if ((LA71_1==134))
					{
						int LA71_4 = input.LA(3);

						if ((LA71_4==WS))
						{
							int LA71_5 = input.LA(4);

							if (((LA71_5>=CASE && LA71_5<=CAST)||LA71_5==CONVERT||LA71_5==EXISTS||LA71_5==NUMBER||LA71_5==SIMPLE_FILE||(LA71_5>=STRING && LA71_5<=SYSTEMVAR)||LA71_5==TOKEN||LA71_5==132))
							{
								alt71 = 1;
							}


						}
						else if (((LA71_4>=CASE && LA71_4<=CAST)||LA71_4==CONVERT||LA71_4==EXISTS||LA71_4==NUMBER||LA71_4==SIMPLE_FILE||(LA71_4>=STRING && LA71_4<=SYSTEMVAR)||LA71_4==TOKEN||LA71_4==132))
						{
							alt71 = 1;
						}


					}
					else if ((LA71_1==130||LA71_1==138))
					{
						alt71 = 1;
					}


				}
				else if ((LA71_0==130||LA71_0==134||LA71_0==138))
				{
					alt71 = 1;
				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:26: ( WS )? op_2 ( WS )? b= expression_1
					{
					DebugLocation(286, 26);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:26: ( WS )?
					int alt69=2;
					try { DebugEnterSubRule(69);
					try { DebugEnterDecision(69, decisionCanBacktrack[69]);
					int LA69_0 = input.LA(1);

					if ((LA69_0==WS))
					{
						alt69 = 1;
					}
					} finally { DebugExitDecision(69); }
					switch (alt69)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:26: WS
						{
						DebugLocation(286, 26);
						WS189=(IToken)Match(input,WS,Follow._WS_in_expression_21791);  
						stream_WS.Add(WS189);


						}
						break;

					}
					} finally { DebugExitSubRule(69); }

					DebugLocation(286, 30);
					PushFollow(Follow._op_2_in_expression_21794);
					op_2190=op_2();
					PopFollow();

					stream_op_2.Add(op_2190.Tree);
					DebugLocation(286, 35);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:35: ( WS )?
					int alt70=2;
					try { DebugEnterSubRule(70);
					try { DebugEnterDecision(70, decisionCanBacktrack[70]);
					int LA70_0 = input.LA(1);

					if ((LA70_0==WS))
					{
						alt70 = 1;
					}
					} finally { DebugExitDecision(70); }
					switch (alt70)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:35: WS
						{
						DebugLocation(286, 35);
						WS191=(IToken)Match(input,WS,Follow._WS_in_expression_21796);  
						stream_WS.Add(WS191);


						}
						break;

					}
					} finally { DebugExitSubRule(70); }

					DebugLocation(286, 40);
					PushFollow(Follow._expression_1_in_expression_21801);
					b=expression_1();
					PopFollow();

					stream_expression_1.Add(b.Tree);


					{
					// AST REWRITE
					// elements: expression_2, op_2, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (object)adaptor.Nil();
					// 286:54: -> ^( T_OP_BINARY op_2 $expression_2 $b)
					{
						DebugLocation(286, 57);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:286:57: ^( T_OP_BINARY op_2 $expression_2 $b)
						{
						object root_1 = (object)adaptor.Nil();
						DebugLocation(286, 59);
						root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_BINARY, "T_OP_BINARY"), root_1);

						DebugLocation(286, 71);
						adaptor.AddChild(root_1, stream_op_2.NextTree());
						DebugLocation(286, 77);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(286, 91);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_2", 38);
			LeaveRule("expression_2", 38);
			LeaveRule_expression_2();
	    }
	 	DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_2"); }
		return retval;

	}
	// $ANTLR end "expression_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_2() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_2() {}

	// $ANTLR start "op_2"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:1: op_2 : ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO );
	[GrammarRule("op_2")]
	private AstParserRuleReturnScope<object, IToken> op_2()
	{
		EnterRule_op_2();
		EnterRule("op_2", 39);
		TraceIn("op_2", 39);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal192 = default(IToken);
	    IToken char_literal193 = default(IToken);
	    IToken char_literal194 = default(IToken);

	    object char_literal192_tree = default(object);
	    object char_literal193_tree = default(object);
	    object char_literal194_tree = default(object);
	    RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
	    RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
	    RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");

		try { DebugEnterRule(GrammarFileName, "op_2");
		DebugLocation(289, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:6: ( '*' -> T_PRODUCT | '/' -> T_DIVIDE | '%' -> T_MODULO )
			int alt72=3;
			try { DebugEnterDecision(72, decisionCanBacktrack[72]);
			switch (input.LA(1))
			{
			case 134:
				{
				alt72 = 1;
				}
				break;
			case 138:
				{
				alt72 = 2;
				}
				break;
			case 130:
				{
				alt72 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:289:8: '*'
				{
				DebugLocation(289, 8);
				char_literal192=(IToken)Match(input,134,Follow._134_in_op_21827);  
				stream_134.Add(char_literal192);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 289:12: -> T_PRODUCT
				{
					DebugLocation(289, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PRODUCT, "T_PRODUCT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:290:4: '/'
				{
				DebugLocation(290, 4);
				char_literal193=(IToken)Match(input,138,Follow._138_in_op_21836);  
				stream_138.Add(char_literal193);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 290:8: -> T_DIVIDE
				{
					DebugLocation(290, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_DIVIDE, "T_DIVIDE"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:291:4: '%'
				{
				DebugLocation(291, 4);
				char_literal194=(IToken)Match(input,130,Follow._130_in_op_21845);  
				stream_130.Add(char_literal194);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 291:8: -> T_MODULO
				{
					DebugLocation(291, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MODULO, "T_MODULO"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_2", 39);
			LeaveRule("op_2", 39);
			LeaveRule_op_2();
	    }
	 	DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "op_2"); }
		return retval;

	}
	// $ANTLR end "op_2"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_1() {}

	// $ANTLR start "expression_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:294:1: expression_1 : ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom );
	[GrammarRule("expression_1")]
	private AstParserRuleReturnScope<object, IToken> expression_1()
	{
		EnterRule_expression_1();
		EnterRule("expression_1", 40);
		TraceIn("expression_1", 40);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal195 = default(IToken);
	    IToken WS196 = default(IToken);
	    IToken WS198 = default(IToken);
	    IToken WS200 = default(IToken);
	    IToken char_literal201 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> op_1197 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_1199 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression_atom202 = default(AstParserRuleReturnScope<object, IToken>);

	    object char_literal195_tree = default(object);
	    object WS196_tree = default(object);
	    object WS198_tree = default(object);
	    object WS200_tree = default(object);
	    object char_literal201_tree = default(object);
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleSubtreeStream stream_expression_1=new RewriteRuleSubtreeStream(adaptor,"rule expression_1");
	    RewriteRuleSubtreeStream stream_op_1=new RewriteRuleSubtreeStream(adaptor,"rule op_1");
		try { DebugEnterRule(GrammarFileName, "expression_1");
		DebugLocation(294, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:2: ( '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')' -> ^( T_OP_UNARY op_1 expression_1 ) | expression_atom )
			int alt76=2;
			try { DebugEnterDecision(76, decisionCanBacktrack[76]);
			int LA76_0 = input.LA(1);

			if ((LA76_0==132))
			{
				int LA76_1 = input.LA(2);

				if ((LA76_1==WS||LA76_1==135||LA76_1==137||LA76_1==150))
				{
					alt76 = 1;
				}
				else if (((LA76_1>=CASE && LA76_1<=CAST)||LA76_1==CONVERT||LA76_1==EXISTS||(LA76_1>=NOT && LA76_1<=NUMBER)||LA76_1==SIMPLE_FILE||(LA76_1>=STRING && LA76_1<=SYSTEMVAR)||LA76_1==TOKEN||LA76_1==132))
				{
					alt76 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 76, 1, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if (((LA76_0>=CASE && LA76_0<=CAST)||LA76_0==CONVERT||LA76_0==EXISTS||LA76_0==NUMBER||LA76_0==SIMPLE_FILE||(LA76_0>=STRING && LA76_0<=SYSTEMVAR)||LA76_0==TOKEN))
			{
				alt76 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:4: '(' ( WS )? op_1 ( WS )? expression_1 ( WS )? ')'
				{
				DebugLocation(296, 4);
				char_literal195=(IToken)Match(input,132,Follow._132_in_expression_11863);  
				stream_132.Add(char_literal195);

				DebugLocation(296, 8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:8: ( WS )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, decisionCanBacktrack[73]);
				int LA73_0 = input.LA(1);

				if ((LA73_0==WS))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:8: WS
					{
					DebugLocation(296, 8);
					WS196=(IToken)Match(input,WS,Follow._WS_in_expression_11865);  
					stream_WS.Add(WS196);


					}
					break;

				}
				} finally { DebugExitSubRule(73); }

				DebugLocation(296, 12);
				PushFollow(Follow._op_1_in_expression_11868);
				op_1197=op_1();
				PopFollow();

				stream_op_1.Add(op_1197.Tree);
				DebugLocation(296, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:17: ( WS )?
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, decisionCanBacktrack[74]);
				int LA74_0 = input.LA(1);

				if ((LA74_0==WS))
				{
					alt74 = 1;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:17: WS
					{
					DebugLocation(296, 17);
					WS198=(IToken)Match(input,WS,Follow._WS_in_expression_11870);  
					stream_WS.Add(WS198);


					}
					break;

				}
				} finally { DebugExitSubRule(74); }

				DebugLocation(296, 21);
				PushFollow(Follow._expression_1_in_expression_11873);
				expression_1199=expression_1();
				PopFollow();

				stream_expression_1.Add(expression_1199.Tree);
				DebugLocation(296, 34);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:34: ( WS )?
				int alt75=2;
				try { DebugEnterSubRule(75);
				try { DebugEnterDecision(75, decisionCanBacktrack[75]);
				int LA75_0 = input.LA(1);

				if ((LA75_0==WS))
				{
					alt75 = 1;
				}
				} finally { DebugExitDecision(75); }
				switch (alt75)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:34: WS
					{
					DebugLocation(296, 34);
					WS200=(IToken)Match(input,WS,Follow._WS_in_expression_11875);  
					stream_WS.Add(WS200);


					}
					break;

				}
				} finally { DebugExitSubRule(75); }

				DebugLocation(296, 38);
				char_literal201=(IToken)Match(input,133,Follow._133_in_expression_11878);  
				stream_133.Add(char_literal201);



				{
				// AST REWRITE
				// elements: op_1, expression_1
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 296:42: -> ^( T_OP_UNARY op_1 expression_1 )
				{
					DebugLocation(296, 45);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:296:45: ^( T_OP_UNARY op_1 expression_1 )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(296, 47);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_OP_UNARY, "T_OP_UNARY"), root_1);

					DebugLocation(296, 58);
					adaptor.AddChild(root_1, stream_op_1.NextTree());
					DebugLocation(296, 63);
					adaptor.AddChild(root_1, stream_expression_1.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:298:4: expression_atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(298, 4);
				PushFollow(Follow._expression_atom_in_expression_11895);
				expression_atom202=expression_atom();
				PopFollow();

				adaptor.AddChild(root_0, expression_atom202.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_1", 40);
			LeaveRule("expression_1", 40);
			LeaveRule_expression_1();
	    }
	 	DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_1"); }
		return retval;

	}
	// $ANTLR end "expression_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_op_1() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_op_1() {}

	// $ANTLR start "op_1"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:1: op_1 : ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS );
	[GrammarRule("op_1")]
	private AstParserRuleReturnScope<object, IToken> op_1()
	{
		EnterRule_op_1();
		EnterRule("op_1", 41);
		TraceIn("op_1", 41);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken char_literal203 = default(IToken);
	    IToken char_literal204 = default(IToken);
	    IToken char_literal205 = default(IToken);

	    object char_literal203_tree = default(object);
	    object char_literal204_tree = default(object);
	    object char_literal205_tree = default(object);
	    RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
	    RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
	    RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");

		try { DebugEnterRule(GrammarFileName, "op_1");
		DebugLocation(301, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:6: ( '~' -> T_BITWISE_NOT | '+' -> T_PLUS | '-' -> T_MINUS )
			int alt77=3;
			try { DebugEnterDecision(77, decisionCanBacktrack[77]);
			switch (input.LA(1))
			{
			case 150:
				{
				alt77 = 1;
				}
				break;
			case 135:
				{
				alt77 = 2;
				}
				break;
			case 137:
				{
				alt77 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 77, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:301:8: '~'
				{
				DebugLocation(301, 8);
				char_literal203=(IToken)Match(input,150,Follow._150_in_op_11905);  
				stream_150.Add(char_literal203);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 301:12: -> T_BITWISE_NOT
				{
					DebugLocation(301, 15);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_BITWISE_NOT, "T_BITWISE_NOT"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:302:5: '+'
				{
				DebugLocation(302, 5);
				char_literal204=(IToken)Match(input,135,Follow._135_in_op_11915);  
				stream_135.Add(char_literal204);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 302:9: -> T_PLUS
				{
					DebugLocation(302, 12);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_PLUS, "T_PLUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:303:4: '-'
				{
				DebugLocation(303, 4);
				char_literal205=(IToken)Match(input,137,Follow._137_in_op_11924);  
				stream_137.Add(char_literal205);



				{
				// AST REWRITE
				// elements: 
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 303:8: -> T_MINUS
				{
					DebugLocation(303, 11);
					adaptor.AddChild(root_0, (object)adaptor.Create(T_MINUS, "T_MINUS"));

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("op_1", 41);
			LeaveRule("op_1", 41);
			LeaveRule_op_1();
	    }
	 	DebugLocation(304, 1);
		} finally { DebugExitRule(GrammarFileName, "op_1"); }
		return retval;

	}
	// $ANTLR end "op_1"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expression_atom() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expression_atom() {}

	// $ANTLR start "expression_atom"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:306:1: expression_atom : ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) );
	[GrammarRule("expression_atom")]
	private AstParserRuleReturnScope<object, IToken> expression_atom()
	{
		EnterRule_expression_atom();
		EnterRule("expression_atom", 42);
		TraceIn("expression_atom", 42);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken NUMBER206 = default(IToken);
	    IToken STRING207 = default(IToken);
	    IToken SYSTEMVAR208 = default(IToken);
	    IToken char_literal209 = default(IToken);
	    IToken char_literal211 = default(IToken);
	    IToken EXISTS215 = default(IToken);
	    IToken WS216 = default(IToken);
	    IToken char_literal217 = default(IToken);
	    IToken WS218 = default(IToken);
	    IToken WS220 = default(IToken);
	    IToken char_literal221 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression210 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> functioncall_or_column212 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> conversion213 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case214 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> select_command219 = default(AstParserRuleReturnScope<object, IToken>);

	    object NUMBER206_tree = default(object);
	    object STRING207_tree = default(object);
	    object SYSTEMVAR208_tree = default(object);
	    object char_literal209_tree = default(object);
	    object char_literal211_tree = default(object);
	    object EXISTS215_tree = default(object);
	    object WS216_tree = default(object);
	    object char_literal217_tree = default(object);
	    object WS218_tree = default(object);
	    object WS220_tree = default(object);
	    object char_literal221_tree = default(object);
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_EXISTS=new RewriteRuleITokenStream(adaptor,"token EXISTS");
	    RewriteRuleITokenStream stream_SYSTEMVAR=new RewriteRuleITokenStream(adaptor,"token SYSTEMVAR");
	    RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
	    RewriteRuleITokenStream stream_NUMBER=new RewriteRuleITokenStream(adaptor,"token NUMBER");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_select_command=new RewriteRuleSubtreeStream(adaptor,"rule select_command");
		try { DebugEnterRule(GrammarFileName, "expression_atom");
		DebugLocation(306, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:2: ( NUMBER -> ^( T_INTEGER NUMBER ) | STRING -> ^( T_STRING STRING ) | SYSTEMVAR -> ^( T_SYSTEMVAR SYSTEMVAR ) | '(' expression ')' -> expression | functioncall_or_column | conversion | case | EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')' -> ^( T_EXISTS select_command ) )
			int alt81=8;
			try { DebugEnterDecision(81, decisionCanBacktrack[81]);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt81 = 1;
				}
				break;
			case STRING:
				{
				alt81 = 2;
				}
				break;
			case SYSTEMVAR:
				{
				alt81 = 3;
				}
				break;
			case 132:
				{
				alt81 = 4;
				}
				break;
			case SIMPLE_FILE:
			case TOKEN:
				{
				alt81 = 5;
				}
				break;
			case CAST:
			case CONVERT:
				{
				alt81 = 6;
				}
				break;
			case CASE:
				{
				alt81 = 7;
				}
				break;
			case EXISTS:
				{
				alt81 = 8;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 81, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:4: NUMBER
				{
				DebugLocation(307, 4);
				NUMBER206=(IToken)Match(input,NUMBER,Follow._NUMBER_in_expression_atom1939);  
				stream_NUMBER.Add(NUMBER206);



				{
				// AST REWRITE
				// elements: NUMBER
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 307:11: -> ^( T_INTEGER NUMBER )
				{
					DebugLocation(307, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:307:14: ^( T_INTEGER NUMBER )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(307, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_INTEGER, "T_INTEGER"), root_1);

					DebugLocation(307, 26);
					adaptor.AddChild(root_1, stream_NUMBER.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:4: STRING
				{
				DebugLocation(308, 4);
				STRING207=(IToken)Match(input,STRING,Follow._STRING_in_expression_atom1952);  
				stream_STRING.Add(STRING207);



				{
				// AST REWRITE
				// elements: STRING
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 308:11: -> ^( T_STRING STRING )
				{
					DebugLocation(308, 14);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:308:14: ^( T_STRING STRING )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(308, 16);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_STRING, "T_STRING"), root_1);

					DebugLocation(308, 25);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:4: SYSTEMVAR
				{
				DebugLocation(309, 4);
				SYSTEMVAR208=(IToken)Match(input,SYSTEMVAR,Follow._SYSTEMVAR_in_expression_atom1965);  
				stream_SYSTEMVAR.Add(SYSTEMVAR208);



				{
				// AST REWRITE
				// elements: SYSTEMVAR
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 309:14: -> ^( T_SYSTEMVAR SYSTEMVAR )
				{
					DebugLocation(309, 17);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:309:17: ^( T_SYSTEMVAR SYSTEMVAR )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(309, 19);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_SYSTEMVAR, "T_SYSTEMVAR"), root_1);

					DebugLocation(309, 31);
					adaptor.AddChild(root_1, stream_SYSTEMVAR.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:310:4: '(' expression ')'
				{
				DebugLocation(310, 4);
				char_literal209=(IToken)Match(input,132,Follow._132_in_expression_atom1978);  
				stream_132.Add(char_literal209);

				DebugLocation(310, 8);
				PushFollow(Follow._expression_in_expression_atom1980);
				expression210=expression();
				PopFollow();

				stream_expression.Add(expression210.Tree);
				DebugLocation(310, 19);
				char_literal211=(IToken)Match(input,133,Follow._133_in_expression_atom1982);  
				stream_133.Add(char_literal211);



				{
				// AST REWRITE
				// elements: expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 310:23: -> expression
				{
					DebugLocation(310, 26);
					adaptor.AddChild(root_0, stream_expression.NextTree());

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:311:4: functioncall_or_column
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(311, 4);
				PushFollow(Follow._functioncall_or_column_in_expression_atom1991);
				functioncall_or_column212=functioncall_or_column();
				PopFollow();

				adaptor.AddChild(root_0, functioncall_or_column212.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:312:4: conversion
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(312, 4);
				PushFollow(Follow._conversion_in_expression_atom1996);
				conversion213=conversion();
				PopFollow();

				adaptor.AddChild(root_0, conversion213.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:313:4: case
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(313, 4);
				PushFollow(Follow._case_in_expression_atom2001);
				case214=@case();
				PopFollow();

				adaptor.AddChild(root_0, case214.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:4: EXISTS ( WS )? '(' ( WS )? select_command ( WS )? ')'
				{
				DebugLocation(314, 4);
				EXISTS215=(IToken)Match(input,EXISTS,Follow._EXISTS_in_expression_atom2006);  
				stream_EXISTS.Add(EXISTS215);

				DebugLocation(314, 11);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:11: ( WS )?
				int alt78=2;
				try { DebugEnterSubRule(78);
				try { DebugEnterDecision(78, decisionCanBacktrack[78]);
				int LA78_0 = input.LA(1);

				if ((LA78_0==WS))
				{
					alt78 = 1;
				}
				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:11: WS
					{
					DebugLocation(314, 11);
					WS216=(IToken)Match(input,WS,Follow._WS_in_expression_atom2008);  
					stream_WS.Add(WS216);


					}
					break;

				}
				} finally { DebugExitSubRule(78); }

				DebugLocation(314, 15);
				char_literal217=(IToken)Match(input,132,Follow._132_in_expression_atom2011);  
				stream_132.Add(char_literal217);

				DebugLocation(314, 19);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:19: ( WS )?
				int alt79=2;
				try { DebugEnterSubRule(79);
				try { DebugEnterDecision(79, decisionCanBacktrack[79]);
				int LA79_0 = input.LA(1);

				if ((LA79_0==WS))
				{
					alt79 = 1;
				}
				} finally { DebugExitDecision(79); }
				switch (alt79)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:19: WS
					{
					DebugLocation(314, 19);
					WS218=(IToken)Match(input,WS,Follow._WS_in_expression_atom2013);  
					stream_WS.Add(WS218);


					}
					break;

				}
				} finally { DebugExitSubRule(79); }

				DebugLocation(314, 23);
				PushFollow(Follow._select_command_in_expression_atom2016);
				select_command219=select_command();
				PopFollow();

				stream_select_command.Add(select_command219.Tree);
				DebugLocation(314, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:38: ( WS )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, decisionCanBacktrack[80]);
				int LA80_0 = input.LA(1);

				if ((LA80_0==WS))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:38: WS
					{
					DebugLocation(314, 38);
					WS220=(IToken)Match(input,WS,Follow._WS_in_expression_atom2018);  
					stream_WS.Add(WS220);


					}
					break;

				}
				} finally { DebugExitSubRule(80); }

				DebugLocation(314, 42);
				char_literal221=(IToken)Match(input,133,Follow._133_in_expression_atom2021);  
				stream_133.Add(char_literal221);



				{
				// AST REWRITE
				// elements: select_command
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 314:46: -> ^( T_EXISTS select_command )
				{
					DebugLocation(314, 49);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:314:49: ^( T_EXISTS select_command )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(314, 51);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_EXISTS, "T_EXISTS"), root_1);

					DebugLocation(314, 60);
					adaptor.AddChild(root_1, stream_select_command.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expression_atom", 42);
			LeaveRule("expression_atom", 42);
			LeaveRule_expression_atom();
	    }
	 	DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "expression_atom"); }
		return retval;

	}
	// $ANTLR end "expression_atom"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_functioncall_or_column() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_functioncall_or_column() {}

	// $ANTLR start "functioncall_or_column"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:318:1: functioncall_or_column : ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) );
	[GrammarRule("functioncall_or_column")]
	private AstParserRuleReturnScope<object, IToken> functioncall_or_column()
	{
		EnterRule_functioncall_or_column();
		EnterRule("functioncall_or_column", 43);
		TraceIn("functioncall_or_column", 43);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken TOKEN222 = default(IToken);
	    IToken WS223 = default(IToken);
	    IToken char_literal224 = default(IToken);
	    IToken WS225 = default(IToken);
	    IToken WS227 = default(IToken);
	    IToken char_literal228 = default(IToken);
	    IToken WS229 = default(IToken);
	    IToken WS231 = default(IToken);
	    IToken char_literal232 = default(IToken);
	    IToken SIMPLE_FILE233 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression226 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression230 = default(AstParserRuleReturnScope<object, IToken>);

	    object TOKEN222_tree = default(object);
	    object WS223_tree = default(object);
	    object char_literal224_tree = default(object);
	    object WS225_tree = default(object);
	    object WS227_tree = default(object);
	    object char_literal228_tree = default(object);
	    object WS229_tree = default(object);
	    object WS231_tree = default(object);
	    object char_literal232_tree = default(object);
	    object SIMPLE_FILE233_tree = default(object);
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_SIMPLE_FILE=new RewriteRuleITokenStream(adaptor,"token SIMPLE_FILE");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "functioncall_or_column");
		DebugLocation(318, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:2: ( TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')' -> ^( T_FUNCTIONCALL TOKEN ( expression )* ) | SIMPLE_FILE -> ^( T_COLUMN SIMPLE_FILE ) )
			int alt89=2;
			try { DebugEnterDecision(89, decisionCanBacktrack[89]);
			int LA89_0 = input.LA(1);

			if ((LA89_0==TOKEN))
			{
				alt89 = 1;
			}
			else if ((LA89_0==SIMPLE_FILE))
			{
				alt89 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:4: TOKEN ( WS )? '(' ( WS )? ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )? ')'
				{
				DebugLocation(319, 4);
				TOKEN222=(IToken)Match(input,TOKEN,Follow._TOKEN_in_functioncall_or_column2041);  
				stream_TOKEN.Add(TOKEN222);

				DebugLocation(319, 10);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:10: ( WS )?
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, decisionCanBacktrack[82]);
				int LA82_0 = input.LA(1);

				if ((LA82_0==WS))
				{
					alt82 = 1;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:10: WS
					{
					DebugLocation(319, 10);
					WS223=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2043);  
					stream_WS.Add(WS223);


					}
					break;

				}
				} finally { DebugExitSubRule(82); }

				DebugLocation(319, 14);
				char_literal224=(IToken)Match(input,132,Follow._132_in_functioncall_or_column2046);  
				stream_132.Add(char_literal224);

				DebugLocation(319, 18);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:18: ( WS )?
				int alt83=2;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, decisionCanBacktrack[83]);
				int LA83_0 = input.LA(1);

				if ((LA83_0==WS))
				{
					alt83 = 1;
				}
				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:18: WS
					{
					DebugLocation(319, 18);
					WS225=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2048);  
					stream_WS.Add(WS225);


					}
					break;

				}
				} finally { DebugExitSubRule(83); }

				DebugLocation(319, 22);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:22: ( expression ( WS )? ( ',' ( WS )? expression ( WS )? )* )?
				int alt88=2;
				try { DebugEnterSubRule(88);
				try { DebugEnterDecision(88, decisionCanBacktrack[88]);
				int LA88_0 = input.LA(1);

				if (((LA88_0>=CASE && LA88_0<=CAST)||LA88_0==CONVERT||LA88_0==EXISTS||(LA88_0>=NOT && LA88_0<=NUMBER)||LA88_0==SIMPLE_FILE||(LA88_0>=STRING && LA88_0<=SYSTEMVAR)||LA88_0==TOKEN||LA88_0==132))
				{
					alt88 = 1;
				}
				} finally { DebugExitDecision(88); }
				switch (alt88)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:23: expression ( WS )? ( ',' ( WS )? expression ( WS )? )*
					{
					DebugLocation(319, 23);
					PushFollow(Follow._expression_in_functioncall_or_column2052);
					expression226=expression();
					PopFollow();

					stream_expression.Add(expression226.Tree);
					DebugLocation(319, 34);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:34: ( WS )?
					int alt84=2;
					try { DebugEnterSubRule(84);
					try { DebugEnterDecision(84, decisionCanBacktrack[84]);
					int LA84_0 = input.LA(1);

					if ((LA84_0==WS))
					{
						alt84 = 1;
					}
					} finally { DebugExitDecision(84); }
					switch (alt84)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:34: WS
						{
						DebugLocation(319, 34);
						WS227=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2054);  
						stream_WS.Add(WS227);


						}
						break;

					}
					} finally { DebugExitSubRule(84); }

					DebugLocation(319, 38);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:38: ( ',' ( WS )? expression ( WS )? )*
					try { DebugEnterSubRule(87);
					while (true)
					{
						int alt87=2;
						try { DebugEnterDecision(87, decisionCanBacktrack[87]);
						int LA87_0 = input.LA(1);

						if ((LA87_0==136))
						{
							alt87 = 1;
						}


						} finally { DebugExitDecision(87); }
						switch ( alt87 )
						{
						case 1:
							DebugEnterAlt(1);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:39: ',' ( WS )? expression ( WS )?
							{
							DebugLocation(319, 39);
							char_literal228=(IToken)Match(input,136,Follow._136_in_functioncall_or_column2058);  
							stream_136.Add(char_literal228);

							DebugLocation(319, 43);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:43: ( WS )?
							int alt85=2;
							try { DebugEnterSubRule(85);
							try { DebugEnterDecision(85, decisionCanBacktrack[85]);
							int LA85_0 = input.LA(1);

							if ((LA85_0==WS))
							{
								alt85 = 1;
							}
							} finally { DebugExitDecision(85); }
							switch (alt85)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:43: WS
								{
								DebugLocation(319, 43);
								WS229=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2060);  
								stream_WS.Add(WS229);


								}
								break;

							}
							} finally { DebugExitSubRule(85); }

							DebugLocation(319, 47);
							PushFollow(Follow._expression_in_functioncall_or_column2063);
							expression230=expression();
							PopFollow();

							stream_expression.Add(expression230.Tree);
							DebugLocation(319, 58);
							// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:58: ( WS )?
							int alt86=2;
							try { DebugEnterSubRule(86);
							try { DebugEnterDecision(86, decisionCanBacktrack[86]);
							int LA86_0 = input.LA(1);

							if ((LA86_0==WS))
							{
								alt86 = 1;
							}
							} finally { DebugExitDecision(86); }
							switch (alt86)
							{
							case 1:
								DebugEnterAlt(1);
								// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:58: WS
								{
								DebugLocation(319, 58);
								WS231=(IToken)Match(input,WS,Follow._WS_in_functioncall_or_column2065);  
								stream_WS.Add(WS231);


								}
								break;

							}
							} finally { DebugExitSubRule(86); }


							}
							break;

						default:
							goto loop87;
						}
					}

					loop87:
						;

					} finally { DebugExitSubRule(87); }


					}
					break;

				}
				} finally { DebugExitSubRule(88); }

				DebugLocation(319, 66);
				char_literal232=(IToken)Match(input,133,Follow._133_in_functioncall_or_column2072);  
				stream_133.Add(char_literal232);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 319:70: -> ^( T_FUNCTIONCALL TOKEN ( expression )* )
				{
					DebugLocation(319, 73);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:73: ^( T_FUNCTIONCALL TOKEN ( expression )* )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(319, 75);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_FUNCTIONCALL, "T_FUNCTIONCALL"), root_1);

					DebugLocation(319, 90);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(319, 96);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:319:96: ( expression )*
					while ( stream_expression.HasNext )
					{
						DebugLocation(319, 96);
						adaptor.AddChild(root_1, stream_expression.NextTree());

					}
					stream_expression.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:4: SIMPLE_FILE
				{
				DebugLocation(321, 4);
				SIMPLE_FILE233=(IToken)Match(input,SIMPLE_FILE,Follow._SIMPLE_FILE_in_functioncall_or_column2090);  
				stream_SIMPLE_FILE.Add(SIMPLE_FILE233);



				{
				// AST REWRITE
				// elements: SIMPLE_FILE
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 321:16: -> ^( T_COLUMN SIMPLE_FILE )
				{
					DebugLocation(321, 19);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:321:19: ^( T_COLUMN SIMPLE_FILE )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(321, 21);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_COLUMN, "T_COLUMN"), root_1);

					DebugLocation(321, 30);
					adaptor.AddChild(root_1, stream_SIMPLE_FILE.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("functioncall_or_column", 43);
			LeaveRule("functioncall_or_column", 43);
			LeaveRule_functioncall_or_column();
	    }
	 	DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "functioncall_or_column"); }
		return retval;

	}
	// $ANTLR end "functioncall_or_column"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_conversion() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_conversion() {}

	// $ANTLR start "conversion"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:324:1: conversion : ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS TOKEN ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) );
	[GrammarRule("conversion")]
	private AstParserRuleReturnScope<object, IToken> conversion()
	{
		EnterRule_conversion();
		EnterRule("conversion", 44);
		TraceIn("conversion", 44);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CONVERT234 = default(IToken);
	    IToken WS235 = default(IToken);
	    IToken char_literal236 = default(IToken);
	    IToken WS237 = default(IToken);
	    IToken TOKEN238 = default(IToken);
	    IToken WS239 = default(IToken);
	    IToken char_literal240 = default(IToken);
	    IToken WS241 = default(IToken);
	    IToken WS243 = default(IToken);
	    IToken char_literal244 = default(IToken);
	    IToken CAST245 = default(IToken);
	    IToken WS246 = default(IToken);
	    IToken char_literal247 = default(IToken);
	    IToken WS248 = default(IToken);
	    IToken WS250 = default(IToken);
	    IToken AS251 = default(IToken);
	    IToken WS252 = default(IToken);
	    IToken TOKEN253 = default(IToken);
	    IToken WS254 = default(IToken);
	    IToken char_literal255 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression242 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> expression249 = default(AstParserRuleReturnScope<object, IToken>);

	    object CONVERT234_tree = default(object);
	    object WS235_tree = default(object);
	    object char_literal236_tree = default(object);
	    object WS237_tree = default(object);
	    object TOKEN238_tree = default(object);
	    object WS239_tree = default(object);
	    object char_literal240_tree = default(object);
	    object WS241_tree = default(object);
	    object WS243_tree = default(object);
	    object char_literal244_tree = default(object);
	    object CAST245_tree = default(object);
	    object WS246_tree = default(object);
	    object char_literal247_tree = default(object);
	    object WS248_tree = default(object);
	    object WS250_tree = default(object);
	    object AS251_tree = default(object);
	    object WS252_tree = default(object);
	    object TOKEN253_tree = default(object);
	    object WS254_tree = default(object);
	    object char_literal255_tree = default(object);
	    RewriteRuleITokenStream stream_CAST=new RewriteRuleITokenStream(adaptor,"token CAST");
	    RewriteRuleITokenStream stream_AS=new RewriteRuleITokenStream(adaptor,"token AS");
	    RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
	    RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
	    RewriteRuleITokenStream stream_CONVERT=new RewriteRuleITokenStream(adaptor,"token CONVERT");
	    RewriteRuleITokenStream stream_TOKEN=new RewriteRuleITokenStream(adaptor,"token TOKEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "conversion");
		DebugLocation(324, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:2: ( CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) | CAST ( WS )? '(' ( WS )? expression WS AS WS TOKEN ( WS )? ')' -> ^( T_CONVERT TOKEN expression ) )
			int alt98=2;
			try { DebugEnterDecision(98, decisionCanBacktrack[98]);
			int LA98_0 = input.LA(1);

			if ((LA98_0==CONVERT))
			{
				alt98 = 1;
			}
			else if ((LA98_0==CAST))
			{
				alt98 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:4: CONVERT ( WS )? '(' ( WS )? TOKEN ( WS )? ',' ( WS )? expression ( WS )? ')'
				{
				DebugLocation(325, 4);
				CONVERT234=(IToken)Match(input,CONVERT,Follow._CONVERT_in_conversion2110);  
				stream_CONVERT.Add(CONVERT234);

				DebugLocation(325, 12);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:12: ( WS )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, decisionCanBacktrack[90]);
				int LA90_0 = input.LA(1);

				if ((LA90_0==WS))
				{
					alt90 = 1;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:12: WS
					{
					DebugLocation(325, 12);
					WS235=(IToken)Match(input,WS,Follow._WS_in_conversion2112);  
					stream_WS.Add(WS235);


					}
					break;

				}
				} finally { DebugExitSubRule(90); }

				DebugLocation(325, 16);
				char_literal236=(IToken)Match(input,132,Follow._132_in_conversion2115);  
				stream_132.Add(char_literal236);

				DebugLocation(325, 20);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:20: ( WS )?
				int alt91=2;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, decisionCanBacktrack[91]);
				int LA91_0 = input.LA(1);

				if ((LA91_0==WS))
				{
					alt91 = 1;
				}
				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:20: WS
					{
					DebugLocation(325, 20);
					WS237=(IToken)Match(input,WS,Follow._WS_in_conversion2117);  
					stream_WS.Add(WS237);


					}
					break;

				}
				} finally { DebugExitSubRule(91); }

				DebugLocation(325, 24);
				TOKEN238=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2120);  
				stream_TOKEN.Add(TOKEN238);

				DebugLocation(325, 30);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:30: ( WS )?
				int alt92=2;
				try { DebugEnterSubRule(92);
				try { DebugEnterDecision(92, decisionCanBacktrack[92]);
				int LA92_0 = input.LA(1);

				if ((LA92_0==WS))
				{
					alt92 = 1;
				}
				} finally { DebugExitDecision(92); }
				switch (alt92)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:30: WS
					{
					DebugLocation(325, 30);
					WS239=(IToken)Match(input,WS,Follow._WS_in_conversion2122);  
					stream_WS.Add(WS239);


					}
					break;

				}
				} finally { DebugExitSubRule(92); }

				DebugLocation(325, 34);
				char_literal240=(IToken)Match(input,136,Follow._136_in_conversion2125);  
				stream_136.Add(char_literal240);

				DebugLocation(325, 38);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:38: ( WS )?
				int alt93=2;
				try { DebugEnterSubRule(93);
				try { DebugEnterDecision(93, decisionCanBacktrack[93]);
				int LA93_0 = input.LA(1);

				if ((LA93_0==WS))
				{
					alt93 = 1;
				}
				} finally { DebugExitDecision(93); }
				switch (alt93)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:38: WS
					{
					DebugLocation(325, 38);
					WS241=(IToken)Match(input,WS,Follow._WS_in_conversion2127);  
					stream_WS.Add(WS241);


					}
					break;

				}
				} finally { DebugExitSubRule(93); }

				DebugLocation(325, 42);
				PushFollow(Follow._expression_in_conversion2130);
				expression242=expression();
				PopFollow();

				stream_expression.Add(expression242.Tree);
				DebugLocation(325, 53);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:53: ( WS )?
				int alt94=2;
				try { DebugEnterSubRule(94);
				try { DebugEnterDecision(94, decisionCanBacktrack[94]);
				int LA94_0 = input.LA(1);

				if ((LA94_0==WS))
				{
					alt94 = 1;
				}
				} finally { DebugExitDecision(94); }
				switch (alt94)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:53: WS
					{
					DebugLocation(325, 53);
					WS243=(IToken)Match(input,WS,Follow._WS_in_conversion2132);  
					stream_WS.Add(WS243);


					}
					break;

				}
				} finally { DebugExitSubRule(94); }

				DebugLocation(325, 57);
				char_literal244=(IToken)Match(input,133,Follow._133_in_conversion2135);  
				stream_133.Add(char_literal244);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 325:61: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(325, 64);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:325:64: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(325, 66);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(325, 76);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(325, 82);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:4: CAST ( WS )? '(' ( WS )? expression WS AS WS TOKEN ( WS )? ')'
				{
				DebugLocation(326, 4);
				CAST245=(IToken)Match(input,CAST,Follow._CAST_in_conversion2150);  
				stream_CAST.Add(CAST245);

				DebugLocation(326, 9);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:9: ( WS )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, decisionCanBacktrack[95]);
				int LA95_0 = input.LA(1);

				if ((LA95_0==WS))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:9: WS
					{
					DebugLocation(326, 9);
					WS246=(IToken)Match(input,WS,Follow._WS_in_conversion2152);  
					stream_WS.Add(WS246);


					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(326, 13);
				char_literal247=(IToken)Match(input,132,Follow._132_in_conversion2155);  
				stream_132.Add(char_literal247);

				DebugLocation(326, 17);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:17: ( WS )?
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, decisionCanBacktrack[96]);
				int LA96_0 = input.LA(1);

				if ((LA96_0==WS))
				{
					alt96 = 1;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:17: WS
					{
					DebugLocation(326, 17);
					WS248=(IToken)Match(input,WS,Follow._WS_in_conversion2157);  
					stream_WS.Add(WS248);


					}
					break;

				}
				} finally { DebugExitSubRule(96); }

				DebugLocation(326, 21);
				PushFollow(Follow._expression_in_conversion2160);
				expression249=expression();
				PopFollow();

				stream_expression.Add(expression249.Tree);
				DebugLocation(326, 32);
				WS250=(IToken)Match(input,WS,Follow._WS_in_conversion2162);  
				stream_WS.Add(WS250);

				DebugLocation(326, 35);
				AS251=(IToken)Match(input,AS,Follow._AS_in_conversion2164);  
				stream_AS.Add(AS251);

				DebugLocation(326, 38);
				WS252=(IToken)Match(input,WS,Follow._WS_in_conversion2166);  
				stream_WS.Add(WS252);

				DebugLocation(326, 41);
				TOKEN253=(IToken)Match(input,TOKEN,Follow._TOKEN_in_conversion2168);  
				stream_TOKEN.Add(TOKEN253);

				DebugLocation(326, 47);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:47: ( WS )?
				int alt97=2;
				try { DebugEnterSubRule(97);
				try { DebugEnterDecision(97, decisionCanBacktrack[97]);
				int LA97_0 = input.LA(1);

				if ((LA97_0==WS))
				{
					alt97 = 1;
				}
				} finally { DebugExitDecision(97); }
				switch (alt97)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:47: WS
					{
					DebugLocation(326, 47);
					WS254=(IToken)Match(input,WS,Follow._WS_in_conversion2170);  
					stream_WS.Add(WS254);


					}
					break;

				}
				} finally { DebugExitSubRule(97); }

				DebugLocation(326, 51);
				char_literal255=(IToken)Match(input,133,Follow._133_in_conversion2173);  
				stream_133.Add(char_literal255);



				{
				// AST REWRITE
				// elements: TOKEN, expression
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 326:55: -> ^( T_CONVERT TOKEN expression )
				{
					DebugLocation(326, 58);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:326:58: ^( T_CONVERT TOKEN expression )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(326, 60);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CONVERT, "T_CONVERT"), root_1);

					DebugLocation(326, 70);
					adaptor.AddChild(root_1, stream_TOKEN.NextNode());
					DebugLocation(326, 76);
					adaptor.AddChild(root_1, stream_expression.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conversion", 44);
			LeaveRule("conversion", 44);
			LeaveRule_conversion();
	    }
	 	DebugLocation(327, 1);
		} finally { DebugExitRule(GrammarFileName, "conversion"); }
		return retval;

	}
	// $ANTLR end "conversion"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case() {}

	// $ANTLR start "case"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:329:1: case : CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) ;
	[GrammarRule("case")]
	private AstParserRuleReturnScope<object, IToken> @case()
	{
		EnterRule_case();
		EnterRule("case", 45);
		TraceIn("case", 45);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken CASE256 = default(IToken);
	    IToken WS257 = default(IToken);
	    IToken WS259 = default(IToken);
	    IToken WS261 = default(IToken);
	    IToken WS263 = default(IToken);
	    IToken END264 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression258 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_when260 = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> case_else262 = default(AstParserRuleReturnScope<object, IToken>);

	    object CASE256_tree = default(object);
	    object WS257_tree = default(object);
	    object WS259_tree = default(object);
	    object WS261_tree = default(object);
	    object WS263_tree = default(object);
	    object END264_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_END=new RewriteRuleITokenStream(adaptor,"token END");
	    RewriteRuleITokenStream stream_CASE=new RewriteRuleITokenStream(adaptor,"token CASE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
	    RewriteRuleSubtreeStream stream_case_when=new RewriteRuleSubtreeStream(adaptor,"rule case_when");
	    RewriteRuleSubtreeStream stream_case_else=new RewriteRuleSubtreeStream(adaptor,"rule case_else");
		try { DebugEnterRule(GrammarFileName, "case");
		DebugLocation(329, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:2: ( CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:4: CASE WS ( expression WS )? ( case_when WS )* ( case_else WS )? END
			{
			DebugLocation(330, 4);
			CASE256=(IToken)Match(input,CASE,Follow._CASE_in_case2195);  
			stream_CASE.Add(CASE256);

			DebugLocation(330, 9);
			WS257=(IToken)Match(input,WS,Follow._WS_in_case2197);  
			stream_WS.Add(WS257);

			DebugLocation(330, 12);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:12: ( expression WS )?
			int alt99=2;
			try { DebugEnterSubRule(99);
			try { DebugEnterDecision(99, decisionCanBacktrack[99]);
			int LA99_0 = input.LA(1);

			if (((LA99_0>=CASE && LA99_0<=CAST)||LA99_0==CONVERT||LA99_0==EXISTS||(LA99_0>=NOT && LA99_0<=NUMBER)||LA99_0==SIMPLE_FILE||(LA99_0>=STRING && LA99_0<=SYSTEMVAR)||LA99_0==TOKEN||LA99_0==132))
			{
				alt99 = 1;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:13: expression WS
				{
				DebugLocation(330, 13);
				PushFollow(Follow._expression_in_case2200);
				expression258=expression();
				PopFollow();

				stream_expression.Add(expression258.Tree);
				DebugLocation(330, 24);
				WS259=(IToken)Match(input,WS,Follow._WS_in_case2202);  
				stream_WS.Add(WS259);


				}
				break;

			}
			} finally { DebugExitSubRule(99); }

			DebugLocation(330, 29);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:29: ( case_when WS )*
			try { DebugEnterSubRule(100);
			while (true)
			{
				int alt100=2;
				try { DebugEnterDecision(100, decisionCanBacktrack[100]);
				int LA100_0 = input.LA(1);

				if ((LA100_0==WHEN))
				{
					alt100 = 1;
				}


				} finally { DebugExitDecision(100); }
				switch ( alt100 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:30: case_when WS
					{
					DebugLocation(330, 30);
					PushFollow(Follow._case_when_in_case2207);
					case_when260=case_when();
					PopFollow();

					stream_case_when.Add(case_when260.Tree);
					DebugLocation(330, 40);
					WS261=(IToken)Match(input,WS,Follow._WS_in_case2209);  
					stream_WS.Add(WS261);


					}
					break;

				default:
					goto loop100;
				}
			}

			loop100:
				;

			} finally { DebugExitSubRule(100); }

			DebugLocation(330, 45);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:45: ( case_else WS )?
			int alt101=2;
			try { DebugEnterSubRule(101);
			try { DebugEnterDecision(101, decisionCanBacktrack[101]);
			int LA101_0 = input.LA(1);

			if ((LA101_0==ELSE))
			{
				alt101 = 1;
			}
			} finally { DebugExitDecision(101); }
			switch (alt101)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:330:46: case_else WS
				{
				DebugLocation(330, 46);
				PushFollow(Follow._case_else_in_case2214);
				case_else262=case_else();
				PopFollow();

				stream_case_else.Add(case_else262.Tree);
				DebugLocation(330, 56);
				WS263=(IToken)Match(input,WS,Follow._WS_in_case2216);  
				stream_WS.Add(WS263);


				}
				break;

			}
			} finally { DebugExitSubRule(101); }

			DebugLocation(330, 61);
			END264=(IToken)Match(input,END,Follow._END_in_case2220);  
			stream_END.Add(END264);



			{
			// AST REWRITE
			// elements: expression, case_else, case_when
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 331:2: -> ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
			{
				DebugLocation(331, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:5: ^( T_CASE ( expression )? ( case_when )* ( case_else )? )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(331, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE, "T_CASE"), root_1);

				DebugLocation(331, 14);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:14: ( expression )?
				if (stream_expression.HasNext)
				{
					DebugLocation(331, 14);
					adaptor.AddChild(root_1, stream_expression.NextTree());

				}
				stream_expression.Reset();
				DebugLocation(331, 26);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:26: ( case_when )*
				while ( stream_case_when.HasNext )
				{
					DebugLocation(331, 26);
					adaptor.AddChild(root_1, stream_case_when.NextTree());

				}
				stream_case_when.Reset();
				DebugLocation(331, 37);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:331:37: ( case_else )?
				if (stream_case_else.HasNext)
				{
					DebugLocation(331, 37);
					adaptor.AddChild(root_1, stream_case_else.NextTree());

				}
				stream_case_else.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case", 45);
			LeaveRule("case", 45);
			LeaveRule_case();
	    }
	 	DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "case"); }
		return retval;

	}
	// $ANTLR end "case"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_when() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_when() {}

	// $ANTLR start "case_when"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:334:1: case_when : WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) ;
	[GrammarRule("case_when")]
	private AstParserRuleReturnScope<object, IToken> case_when()
	{
		EnterRule_case_when();
		EnterRule("case_when", 46);
		TraceIn("case_when", 46);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken WHEN265 = default(IToken);
	    IToken WS266 = default(IToken);
	    IToken WS267 = default(IToken);
	    IToken THEN268 = default(IToken);
	    IToken WS269 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> a = default(AstParserRuleReturnScope<object, IToken>);
	    AstParserRuleReturnScope<object, IToken> b = default(AstParserRuleReturnScope<object, IToken>);

	    object WHEN265_tree = default(object);
	    object WS266_tree = default(object);
	    object WS267_tree = default(object);
	    object THEN268_tree = default(object);
	    object WS269_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_THEN=new RewriteRuleITokenStream(adaptor,"token THEN");
	    RewriteRuleITokenStream stream_WHEN=new RewriteRuleITokenStream(adaptor,"token WHEN");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_when");
		DebugLocation(334, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:2: ( WHEN WS a= expression WS THEN WS b= expression -> ^( T_CASE_WHEN $a $b) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:335:4: WHEN WS a= expression WS THEN WS b= expression
			{
			DebugLocation(335, 4);
			WHEN265=(IToken)Match(input,WHEN,Follow._WHEN_in_case_when2248);  
			stream_WHEN.Add(WHEN265);

			DebugLocation(335, 9);
			WS266=(IToken)Match(input,WS,Follow._WS_in_case_when2250);  
			stream_WS.Add(WS266);

			DebugLocation(335, 13);
			PushFollow(Follow._expression_in_case_when2254);
			a=expression();
			PopFollow();

			stream_expression.Add(a.Tree);
			DebugLocation(335, 25);
			WS267=(IToken)Match(input,WS,Follow._WS_in_case_when2256);  
			stream_WS.Add(WS267);

			DebugLocation(335, 28);
			THEN268=(IToken)Match(input,THEN,Follow._THEN_in_case_when2258);  
			stream_THEN.Add(THEN268);

			DebugLocation(335, 33);
			WS269=(IToken)Match(input,WS,Follow._WS_in_case_when2260);  
			stream_WS.Add(WS269);

			DebugLocation(335, 37);
			PushFollow(Follow._expression_in_case_when2264);
			b=expression();
			PopFollow();

			stream_expression.Add(b.Tree);


			{
			// AST REWRITE
			// elements: b, a
			// token labels: 
			// rule labels: retval, b, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 336:2: -> ^( T_CASE_WHEN $a $b)
			{
				DebugLocation(336, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:336:5: ^( T_CASE_WHEN $a $b)
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(336, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_WHEN, "T_CASE_WHEN"), root_1);

				DebugLocation(336, 20);
				adaptor.AddChild(root_1, stream_a.NextTree());
				DebugLocation(336, 23);
				adaptor.AddChild(root_1, stream_b.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_when", 46);
			LeaveRule("case_when", 46);
			LeaveRule_case_when();
	    }
	 	DebugLocation(337, 1);
		} finally { DebugExitRule(GrammarFileName, "case_when"); }
		return retval;

	}
	// $ANTLR end "case_when"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_case_else() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_case_else() {}

	// $ANTLR start "case_else"
	// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:339:1: case_else : ELSE WS expression -> ^( T_CASE_ELSE expression ) ;
	[GrammarRule("case_else")]
	private AstParserRuleReturnScope<object, IToken> case_else()
	{
		EnterRule_case_else();
		EnterRule("case_else", 47);
		TraceIn("case_else", 47);
	    AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
	    retval.Start = (IToken)input.LT(1);

	    object root_0 = default(object);

	    IToken ELSE270 = default(IToken);
	    IToken WS271 = default(IToken);
	    AstParserRuleReturnScope<object, IToken> expression272 = default(AstParserRuleReturnScope<object, IToken>);

	    object ELSE270_tree = default(object);
	    object WS271_tree = default(object);
	    RewriteRuleITokenStream stream_WS=new RewriteRuleITokenStream(adaptor,"token WS");
	    RewriteRuleITokenStream stream_ELSE=new RewriteRuleITokenStream(adaptor,"token ELSE");
	    RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
		try { DebugEnterRule(GrammarFileName, "case_else");
		DebugLocation(339, 1);
		try
		{
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:2: ( ELSE WS expression -> ^( T_CASE_ELSE expression ) )
			DebugEnterAlt(1);
			// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:340:4: ELSE WS expression
			{
			DebugLocation(340, 4);
			ELSE270=(IToken)Match(input,ELSE,Follow._ELSE_in_case_else2289);  
			stream_ELSE.Add(ELSE270);

			DebugLocation(340, 9);
			WS271=(IToken)Match(input,WS,Follow._WS_in_case_else2291);  
			stream_WS.Add(WS271);

			DebugLocation(340, 12);
			PushFollow(Follow._expression_in_case_else2293);
			expression272=expression();
			PopFollow();

			stream_expression.Add(expression272.Tree);


			{
			// AST REWRITE
			// elements: expression
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 341:2: -> ^( T_CASE_ELSE expression )
			{
				DebugLocation(341, 5);
				// C:\\Users\\wim devos.GENOFFICE\\Documents\\GitHub\\FxGqlC\\FxGql\\FxGqlLib\\Parser\\GqlAntlrOutput\\gql.g:341:5: ^( T_CASE_ELSE expression )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(341, 7);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(T_CASE_ELSE, "T_CASE_ELSE"), root_1);

				DebugLocation(341, 19);
				adaptor.AddChild(root_1, stream_expression.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("case_else", 47);
			LeaveRule("case_else", 47);
			LeaveRule_case_else();
	    }
	 	DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "case_else"); }
		return retval;

	}
	// $ANTLR end "case_else"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _WS_in_parse312 = new BitSet(new ulong[]{0x4000000000000UL,0x40000000000000UL});
		public static readonly BitSet _commands_in_parse316 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_parse318 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse323 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _command_in_commands346 = new BitSet(new ulong[]{0x4000000000002UL,0x840000000000000UL,0x800UL});
		public static readonly BitSet _WS_in_commands349 = new BitSet(new ulong[]{0x4000000000000UL,0x40000000000000UL,0x800UL});
		public static readonly BitSet _139_in_commands353 = new BitSet(new ulong[]{0x4000000000000UL,0x840000000000000UL});
		public static readonly BitSet _WS_in_commands355 = new BitSet(new ulong[]{0x4000000000000UL,0x40000000000000UL});
		public static readonly BitSet _command_in_commands360 = new BitSet(new ulong[]{0x4000000000002UL,0x840000000000000UL,0x800UL});
		public static readonly BitSet _select_command_in_command380 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _use_command_in_command385 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SELECT_in_select_command399 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command402 = new BitSet(new ulong[]{0x200020UL});
		public static readonly BitSet _distinct_clause_in_select_command404 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command409 = new BitSet(new ulong[]{0x400000000000000UL});
		public static readonly BitSet _top_clause_in_select_command411 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command415 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x50UL});
		public static readonly BitSet _column_list_in_select_command417 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command420 = new BitSet(new ulong[]{0x200000000UL});
		public static readonly BitSet _into_clause_in_select_command422 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command427 = new BitSet(new ulong[]{0x8000000UL});
		public static readonly BitSet _from_clause_in_select_command429 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command434 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _where_clause_in_select_command436 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command441 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _groupby_clause_in_select_command443 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_select_command448 = new BitSet(new ulong[]{0x200000000000UL});
		public static readonly BitSet _orderby_clause_in_select_command450 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DISTINCT_in_distinct_clause495 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ALL_in_distinct_clause504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOP_in_top_clause520 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_top_clause522 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_top_clause524 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _column_in_column_list546 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _WS_in_column_list549 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_column_list552 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x50UL});
		public static readonly BitSet _WS_in_column_list554 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x50UL});
		public static readonly BitSet _column_in_column_list557 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _134_in_column581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_column595 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_column598 = new BitSet(new ulong[]{0x8000000000000UL});
		public static readonly BitSet _SIMPLE_FILE_in_column600 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTO_in_into_clause623 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_into_clause625 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _file_in_into_clause627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FROM_in_from_clause647 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_from_clause649 = new BitSet(new ulong[]{0x28000000000000UL,0x0UL,0x40010UL});
		public static readonly BitSet _from_clause_item_in_from_clause651 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _WS_in_from_clause654 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_from_clause657 = new BitSet(new ulong[]{0x28000000000000UL,0x800000000000000UL,0x40010UL});
		public static readonly BitSet _WS_in_from_clause659 = new BitSet(new ulong[]{0x28000000000000UL,0x0UL,0x40010UL});
		public static readonly BitSet _from_clause_item_in_from_clause662 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _STRING_in_from_clause_item685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _file_in_from_clause_item698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _subquery_in_from_clause_item703 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _146_in_file715 = new BitSet(new ulong[]{0x20000000000000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_file717 = new BitSet(new ulong[]{0x20000000000000UL,0x0UL,0x10UL});
		public static readonly BitSet _file_string_in_file721 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x80000UL});
		public static readonly BitSet _subquery_in_file725 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x80000UL});
		public static readonly BitSet _WS_in_file729 = new BitSet(new ulong[]{0x0UL,0x0UL,0x200UL});
		public static readonly BitSet _file_option_in_file731 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x80000UL});
		public static readonly BitSet _WS_in_file735 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _147_in_file738 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_file757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_file_string779 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_subquery799 = new BitSet(new ulong[]{0x4000000000000UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_subquery801 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _select_command_in_subquery804 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_subquery806 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_subquery809 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_file_option827 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _file_option_name_in_file_option829 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x8000UL});
		public static readonly BitSet _WS_in_file_option833 = new BitSet(new ulong[]{0x0UL,0x0UL,0x8000UL});
		public static readonly BitSet _143_in_file_option836 = new BitSet(new ulong[]{0x220040000000000UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_file_option838 = new BitSet(new ulong[]{0x220040000000000UL});
		public static readonly BitSet _file_option_value_in_file_option841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_file_option_name865 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHERE_in_where_clause897 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_where_clause899 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_where_clause901 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GROUP_in_groupby_clause920 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_groupby_clause922 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_groupby_clause924 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_groupby_clause926 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_list_in_groupby_clause928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ORDER_in_orderby_clause949 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_orderby_clause951 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _BY_in_orderby_clause953 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_orderby_clause955 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _orderby_column_list_in_orderby_clause957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list978 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _WS_in_orderby_column_list981 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_orderby_column_list984 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_orderby_column_list986 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _orderby_column_in_orderby_column_list989 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _expression_in_orderby_column1009 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_orderby_column1012 = new BitSet(new ulong[]{0x80200UL});
		public static readonly BitSet _orderby_direction_in_orderby_column1014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ASC_in_orderby_direction1039 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DESC_in_orderby_direction1048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _USE_in_use_command1066 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_use_command1068 = new BitSet(new ulong[]{0x8000000000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _file_in_use_command1070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expression_list1092 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _WS_in_expression_list1095 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_expression_list1098 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_list1100 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_expression_list1103 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _expression_list_in_expression_list_or_select_command1126 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _select_command_in_expression_list_or_select_command1130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_7_in_expression1142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_6_in_expression_71158 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_71165 = new BitSet(new ulong[]{0x12A100000800UL,0x8000000000000000UL,0x3F003UL});
		public static readonly BitSet _op_7_in_expression_71170 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_71172 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_6_in_expression_71176 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _IN_in_expression_71195 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_71197 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_expression_71200 = new BitSet(new ulong[]{0x26C06000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_71202 = new BitSet(new ulong[]{0x26C06000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71205 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_expression_71207 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_71210 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _NOT_in_expression_71228 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_71230 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _IN_in_expression_71232 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_71234 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_expression_71237 = new BitSet(new ulong[]{0x26C06000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_71239 = new BitSet(new ulong[]{0x26C06000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71243 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_expression_71246 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_71249 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _op_4_in_expression_71267 = new BitSet(new ulong[]{0x10000000000080UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_71269 = new BitSet(new ulong[]{0x10000000000080UL});
		public static readonly BitSet _SOME_in_expression_71273 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _ANY_in_expression_71277 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_71280 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_expression_71283 = new BitSet(new ulong[]{0x26C06000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71285 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_71287 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _op_4_in_expression_71307 = new BitSet(new ulong[]{0x20UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_71309 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _ALL_in_expression_71312 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_71314 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_expression_71317 = new BitSet(new ulong[]{0x26C06000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_list_or_select_command_in_expression_71319 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_71321 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _OR_in_op_71351 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LIKE_in_op_71360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71369 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_op_71371 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _LIKE_in_op_71373 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MATCH_in_op_71382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71391 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_op_71393 = new BitSet(new ulong[]{0x8000000000UL});
		public static readonly BitSet _MATCH_in_op_71395 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _BETWEEN_in_op_71404 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_71413 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_op_71415 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _BETWEEN_in_op_71417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_5_in_expression_61436 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_61443 = new BitSet(new ulong[]{0x40UL});
		public static readonly BitSet _op_6_in_expression_61445 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_61447 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_5_in_expression_61451 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL});
		public static readonly BitSet _AND_in_op_61479 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_5_in_expression_51497 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_51499 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_5_in_expression_51501 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_4_in_expression_51516 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NOT_in_op_51527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_3_in_expression_41546 = new BitSet(new ulong[]{0x2UL,0x8800000000000000UL,0x3F003UL});
		public static readonly BitSet _WS_in_expression_41553 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL,0x3F003UL});
		public static readonly BitSet _op_4_in_expression_41556 = new BitSet(new ulong[]{0x26804000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_41558 = new BitSet(new ulong[]{0x26804000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_3_in_expression_41563 = new BitSet(new ulong[]{0x2UL,0x8800000000000000UL,0x3F003UL});
		public static readonly BitSet _143_in_op_41589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_op_41598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_op_41608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_op_41618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_op_41627 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_op_41636 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _127_in_op_41645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_op_41654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _140_in_op_41664 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_2_in_expression_31683 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x300288UL});
		public static readonly BitSet _WS_in_expression_31690 = new BitSet(new ulong[]{0x0UL,0x0UL,0x300288UL});
		public static readonly BitSet _op_3_in_expression_31693 = new BitSet(new ulong[]{0x26804000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_31695 = new BitSet(new ulong[]{0x26804000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_2_in_expression_31700 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x300288UL});
		public static readonly BitSet _135_in_op_31726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_op_31735 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_op_31744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_op_31753 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_op_31762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_1_in_expression_21784 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x444UL});
		public static readonly BitSet _WS_in_expression_21791 = new BitSet(new ulong[]{0x0UL,0x0UL,0x444UL});
		public static readonly BitSet _op_2_in_expression_21794 = new BitSet(new ulong[]{0x26804000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_21796 = new BitSet(new ulong[]{0x26804000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_1_in_expression_21801 = new BitSet(new ulong[]{0x2UL,0x800000000000000UL,0x444UL});
		public static readonly BitSet _134_in_op_21827 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_op_21836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_op_21845 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_expression_11863 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x400280UL});
		public static readonly BitSet _WS_in_expression_11865 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400280UL});
		public static readonly BitSet _op_1_in_expression_11868 = new BitSet(new ulong[]{0x26804000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_11870 = new BitSet(new ulong[]{0x26804000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_1_in_expression_11873 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_expression_11875 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_11878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_atom_in_expression_11895 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_op_11905 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_op_11915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_op_11924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_expression_atom1939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_expression_atom1952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SYSTEMVAR_in_expression_atom1965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_expression_atom1978 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_expression_atom1980 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_atom1982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _functioncall_or_column_in_expression_atom1991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversion_in_expression_atom1996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _case_in_expression_atom2001 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _EXISTS_in_expression_atom2006 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_expression_atom2008 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_expression_atom2011 = new BitSet(new ulong[]{0x4000000000000UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_expression_atom2013 = new BitSet(new ulong[]{0x4000000000000UL});
		public static readonly BitSet _select_command_in_expression_atom2016 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_expression_atom2018 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_expression_atom2021 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _TOKEN_in_functioncall_or_column2041 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_functioncall_or_column2043 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_functioncall_or_column2046 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x30UL});
		public static readonly BitSet _WS_in_functioncall_or_column2048 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x30UL});
		public static readonly BitSet _expression_in_functioncall_or_column2052 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x120UL});
		public static readonly BitSet _WS_in_functioncall_or_column2054 = new BitSet(new ulong[]{0x0UL,0x0UL,0x120UL});
		public static readonly BitSet _136_in_functioncall_or_column2058 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_functioncall_or_column2060 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_functioncall_or_column2063 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x120UL});
		public static readonly BitSet _WS_in_functioncall_or_column2065 = new BitSet(new ulong[]{0x0UL,0x0UL,0x120UL});
		public static readonly BitSet _133_in_functioncall_or_column2072 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SIMPLE_FILE_in_functioncall_or_column2090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CONVERT_in_conversion2110 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_conversion2112 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_conversion2115 = new BitSet(new ulong[]{0x200000000000000UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_conversion2117 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion2120 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x100UL});
		public static readonly BitSet _WS_in_conversion2122 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100UL});
		public static readonly BitSet _136_in_conversion2125 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_conversion2127 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_conversion2130 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_conversion2132 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_conversion2135 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CAST_in_conversion2150 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_conversion2152 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_conversion2155 = new BitSet(new ulong[]{0x26806000202C000UL,0x800000000000000UL,0x10UL});
		public static readonly BitSet _WS_in_conversion2157 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_conversion2160 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_conversion2162 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _AS_in_conversion2164 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_conversion2166 = new BitSet(new ulong[]{0x200000000000000UL});
		public static readonly BitSet _TOKEN_in_conversion2168 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20UL});
		public static readonly BitSet _WS_in_conversion2170 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_conversion2173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CASE_in_case2195 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case2197 = new BitSet(new ulong[]{0x26806000382C000UL,0x200000000000000UL,0x10UL});
		public static readonly BitSet _expression_in_case2200 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case2202 = new BitSet(new ulong[]{0x1800000UL,0x200000000000000UL});
		public static readonly BitSet _case_when_in_case2207 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case2209 = new BitSet(new ulong[]{0x1800000UL,0x200000000000000UL});
		public static readonly BitSet _case_else_in_case2214 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case2216 = new BitSet(new ulong[]{0x1000000UL});
		public static readonly BitSet _END_in_case2220 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _WHEN_in_case_when2248 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case_when2250 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_case_when2254 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case_when2256 = new BitSet(new ulong[]{0x100000000000000UL});
		public static readonly BitSet _THEN_in_case_when2258 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case_when2260 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_case_when2264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ELSE_in_case_else2289 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL});
		public static readonly BitSet _WS_in_case_else2291 = new BitSet(new ulong[]{0x26806000202C000UL,0x0UL,0x10UL});
		public static readonly BitSet _expression_in_case_else2293 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  FxGqlLib 
